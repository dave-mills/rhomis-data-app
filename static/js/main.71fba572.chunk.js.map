{"version":3,"sources":["components/authentication-component/AuthContext.js","components/login-component/login-component.js","components/data-query-component/data-query-component.js","components/register-component/register-component.js","components/portal-component/portal-data.js","components/portal-component/portal-component.js","components/user-info-component/UserContext.js","components/fetching-context-info/fetching-context-info.js","components/project-management-component/project-management-component.js","components/form-management-component/form-management-component.js","components/form-admin-component/form-admin-component.js","components/navigation-bar/navigation-bar-component.js","components/form-creation-component/form-creation-component.js","components/routing-component/routing-component.js","App.js","reportWebVitals.js","index.js"],"names":["AuthContext","createContext","CheckCredentials","props","email","setRequestError","password","LoginCard","useContext","setAuthToken","history","useHistory","useState","setEmail","setPassword","requestError","loading","setLoading","useEffect","localToken","localStorage","getItem","console","log","currentDate","Date","localTokenCreationTime","getTime","push","Card","className","Header","Body","size","Form","style","Group","Label","htmlFor","Control","id","type","onChange","event","target","value","Button","variant","Spinner","as","animation","role","onClick","a","Login","tokenResponse","status","data","setItem","tokenDate","textAlign","width","href","preventDefault","axios","method","url","process","response","LoginComponent","open","setOpen","Fade","in","renderTable","undefined","length","full_data_set","slice","column_names","household_index","household_column_names","Object","keys","column_index","new_column","some","column","splice","index_of_previous_column_name","indexOf","Table","striped","bordered","hover","responsive","map","column_key","household","household_key","fetchProjectInformation","authToken","headers","fetchData","dataType","projectName","formID","projectID","generateDataDownloadLink","dataToDownload","dataDownloadLink","dataCSV","csv_lines","join","household_data","concat","generateCSV","Blob","window","URL","revokeObjectURL","createObjectURL","dataDownloadButton","csvsAvailable","download","dropDownTitle","titleType","filterButtons","projectInformationAvailable","projectInformation","setProjectName","setFormID","setDataType","projectNames","project","name","formIDs","filter","forms","DropdownButton","onSelect","e","title","Dropdown","Item","eventKey","projectInformationButton","setProjectInformation","setProjectInformationAvailable","newProjectInfo","fetchDataButton","setDataDownloadLink","setData","setcsvAvailable","newData","processData","formName","generateData","numberOfResponses","processDataButton","generateDataButton","DataQueryComponent","RegistrationCard","setTitle","confirmPassword","setConfirmPassword","confirmEmail","setConfirmEmail","firstName","setfirstName","surname","setSurname","captchaToken","setCaptchaToken","passwordsMatch","bothPasswordsEntered","emailsMatch","bothEmailsEntered","registrationEnabled","Row","Col","xs","Select","defaultValue","disabled","Text","sitekey","RegisterUser","registrationResult","RegisterComponent","PortalDataAll","label","text","icon","RiSurveyFill","link","external","MdOutlineDashboardCustomize","MdOutlineSendToMobile","FiDatabase","MdHelpOutline","MdOutlineCreate","FetchProjectInformation","PortalCard","Icon","color","action","class","margin","padding","border","backgroundColor","to","pathname","RenderPortalCards","portalCardData","userData","basic","cardToAdd","item","dataCollector","projectManager","analyst","researcher","administrator","PortalItem","PortalComponent","setUserData","setUserInfoAvail","newUserData","UserContext","FetchUserInformation","setUserInfo","CheckForLocalToken","GetFormInformation","result","setFormData","alert","GetInformationForFormComponent","NoProjectFound","colSpan","RenderProjectInformation","projects","index","dateString","createdAt","toDateString","description","ProjectManagementComponent","adminData","setAdminData","filters","setFilters","setProjectSelected","setFormSelected","newFilters","BackButton","FinalizeForm","params","form_name","form","project_name","NoInfoFound","FormTables","allowToFinalize","user","roles","includes","projectSelected","formsExist","formsForProject","disableButton","draft","AddProjectManager","RenderProjectAdmin","renderUserForm","newUser","setNewUser","FormManagementComponent","useParams","formSelected","height","FetchData","unit","ProcessData","commandType","formVersion","AddFormUser","userType","UserForm","setUserType","RenderFormAdmin","renderInstallCode","setRenderInstallCode","renderODKFormCode","setRenderODKFormCode","unitsSelect","setUnitsSelect","rhomisDataSelect","setRHoMISSelect","unitsData","setUnitsData","rhomisData","setRHoMISData","unitsDownloadLink","setUnitsDownloadLink","formState","encoded_settings","dataAnalystOfForm","projectManagerOfForm","renderUnitsForm","newUnitsData","units_download_link","formData","units","unitType","renderDataForm","newRHoMISData","rhomis_download_link","dataSets","dataSet","FormAdminComponent","odkConf","initialState","setInitialState","GetUserInfo","new_form_state","CheckFormCode","CheckUnitsForm","CheckDataForm","CheckProjectManager","CheckDataAnalyst","draftCollectionDetails","collectionDetails","CheckODKConf","deflateSync","JSON","stringify","toString","CheckEncodedSettings","CheckDraft","setFormState","GetAdminData","setShowProjectManagement","setShowAdmin","setShowCollectData","MainNavbar","SURVEY_BUILDER_URL","show","setShow","handleClose","handleShow","showAdmin","showCollectData","showProjectManagement","Navbar","fixed","bg","expand","Nav","Link","clear","Offcanvas","backdrop","placement","onHide","closeVariant","closeButton","Title","GetProjectInformation","CreateProject","projectDescription","projectCreationResponse","DeleteProject","CreateForm","formFile","formCreationResponse","UpdateForm","CreateProjectForm","setNewProjectName","rows","setNewProjectDescription","newProjectName","newProjectDescription","NewFormEntry","projectList","setSelectedProject","option","setNewFormName","setNewFormVersion","setSelectedFile","files","selectedProject","newFormName","newFormVersion","selectedFile","NewDraftFormEntry","formList","setFormList","projectDisabled","setSelectedDraftProject","newFormList","setNewDraftFormName","setNewDraftFormVersion","setSelectedDraftFile","selectedDraftProject","newDraftFormName","newDraftFormVersion","selectedDraftFile","AddAdministrator","Authorization","newAdmin","FormCreationComponent","setNewAdmin","Accordion","defaultActiveKey","md","RoutingComponent","exact","path","from","component","App","userInfo","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71fba572.chunk.js","sourcesContent":["// Copyright (C) 2022 Léo Gorman\n// \n// This file is part of rhomis-data-app.\n// \n// rhomis-data-app is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// rhomis-data-app is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with rhomis-data-app.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\n// A component for creating the authentiction\n// context used throughout the application.\n\n// Context provider created in the main App.js\n// file in the src directory.\n\nimport React, { createContext } from 'react';\n\nconst AuthContext = createContext()\n\nexport default AuthContext;\n\n","/**/\n\nimport React, { useState, useContext, useEffect } from 'react'\nimport { Button, Card, Form, Spinner } from 'react-bootstrap'\nimport Fade from 'react-bootstrap/Fade'\nimport { FaUserCircle } from 'react-icons/fa'\nimport axios from 'axios'\nimport { useHistory } from 'react-router'\nimport \"./login-component.css\"\n\nimport AuthContext from '../authentication-component/AuthContext';\n\n\n\n\nfunction CheckCredentials(props) {\n    if (props.email === null) {\n        props.setRequestError(\"No email given\")\n        return false\n    }\n    if (props.password === null) {\n        props.setRequestError(\"No password given\")\n        return false\n    }\n\n    return true\n}\n\nfunction LoginCard(props) {\n    const [authToken, setAuthToken] = useContext(AuthContext)\n\n    const history = useHistory()\n\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n    const [requestError, setRequestError] = useState(\"\")\n    const [loading, setLoading] = useState(\"\")\n\n\n    useEffect(() => {\n        const localToken = localStorage.getItem(\"userToken\")\n        console.log(\"Local Token\")\n        console.log(localToken)\n\n        const currentDate = new Date()\n        const localTokenCreationTime = new Date(localStorage.getItem(\"createdAt\"))\n        console.log(\"Current date\")\n        console.log(currentDate)\n        console.log(\"Token time\")\n        console.log(localTokenCreationTime)\n\n        console.log(\"Difference\")\n        console.log(currentDate.getTime() - localTokenCreationTime.getTime())\n\n        const timeDifference = currentDate.getTime() - localTokenCreationTime.getTime()\n        if (timeDifference < 60 * 60 * 1000) {\n            setAuthToken(localToken)\n            history.push(\"/\")\n            return\n        }\n    }, [])\n\n\n\n    return (\n        <Card className=\"card-style border-0 login-card\">\n            <Card.Header className=\"bg-dark text-white\">\n                <h2>Login</h2>\n            </Card.Header>\n\n            <Card.Body>\n                <div className=\"icon-container\">\n                    <FaUserCircle size={60} />\n                </div>\n                <Form style={{ \"marginLeft\": \"2em\", \"marginRight\": \"2em\" }}>\n                    <Form.Group className=\"form-group-spaced\">\n                        <Form.Label htmlFor=\"email\">Email</Form.Label>\n                        <Form.Control id=\"email\" type=\"text\" onChange={(event) => setEmail(event.target.value)} />\n                    </Form.Group>\n                    <Form.Group className=\"form-group-spaced\">\n                        <Form.Label htmlFor=\"password\">Password</Form.Label>\n                        <Form.Control type=\"password\" onChange={(event) => setPassword(event.target.value)} />\n                    </Form.Group>\n                    {requestError ? <p className=\"warning\">{requestError}</p> : null}\n                    <div className=\"button-container\">\n                        {loading ? <Button className=\"login-buttons\" variant=\"dark\">\n                            <Spinner\n                                as=\"span\"\n                                animation=\"border\"\n                                size=\"sm\"\n                                role=\"status\"\n                                aria-hidden=\"true\"\n                            />\n                            Loading</Button> :\n                            <Button className=\"login-buttons\"\n                                variant=\"dark\"\n                                onClick={async (event) => {\n                                    setLoading(true)\n\n                                    const tokenResponse = await Login({\n                                        event: event,\n                                        email: email,\n                                        password: password,\n                                        requestError: requestError,\n                                        setRequestError: setRequestError,\n\n\n                                        // setAuthToken: props.setAuthToken\n                                    })\n                                    setLoading(false)\n\n                                    if (tokenResponse.status === 400) {\n                                        history.push(\"/login\")\n                                        return\n                                    }\n\n                                    if (tokenResponse.status === 200) {\n\n                                        setAuthToken(tokenResponse.data)\n                                        localStorage.setItem('userToken', tokenResponse.data)\n                                        const tokenDate = new Date()\n                                        localStorage.setItem('createdAt', tokenDate)\n                                        history.push(\"/\")\n\n                                    }\n\n\n\n                                }}>Login</Button>}\n                    </div>\n                    <div style={{ textAlign: \"center\", width: \"100%\" }}>\n                        Don't have an account?&nbsp;\n                        <a href=\"/#/register\">Click here</a> for registration\n                    </div>\n                </Form>\n            </Card.Body>\n        </Card >\n    )\n\n}\n\n\n\n\n\n\nasync function Login(props) {\n    props.event.preventDefault()\n    props.setRequestError(null)\n\n\n    const credentialsGiven = CheckCredentials({ email: props.email, password: props.password, requestError: props.requestError, setRequestError: props.setRequestError })\n\n    try {\n        // await timeout(2000)\n\n        const response = await axios({\n            method: \"post\",\n            url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/user/login\",\n            data: {\n                email: props.email,\n                password: props.password\n            }\n        })\n        console.log(response)\n        return (response)\n    } catch (err) {\n        props.setRequestError(err.response.data)\n        return (err.response)\n\n    }\n}\n\n\n\nfunction LoginComponent(props) {\n    const [open, setOpen] = useState(false)\n\n    useEffect(() => {\n        setOpen(true)\n    }, [])\n\n    return (\n        <Fade in={open}>\n\n            <div className=\"child-login-container\">\n                <LoginCard />\n            </div >\n        </Fade>\n    )\n}\n\nexport {\n    LoginComponent,\n    CheckCredentials,\n    LoginCard,\n    Login\n}","import React, { useState, useEffect, useContext } from 'react'\nimport axios from 'axios'\nimport { Table, Button, Dropdown, DropdownButton, Card } from 'react-bootstrap'\nimport \"./data-query-component.css\"\nimport { Route, Redirect } from 'react-router-dom'\n\nimport AuthContext from '../authentication-component/AuthContext';\n\n// Function to render a table coming in from mongoDB\nfunction renderTable(data) {\n    // console.log(data)\n    if (data === null) {\n        return (<h1>No Data found</h1>)\n    }\n\n    if (data.length === undefined) {\n        return (<h1>No Data found</h1>)\n    }\n\n\n\n    if (data !== null) {\n        var full_data_set = data.slice(0, 9)\n        var column_names = []\n\n        // Looping through households\n        for (let household_index = 0; household_index < full_data_set.length; household_index++) {\n            // All of the column names for this individual household\n            var household_column_names = Object.keys(full_data_set[household_index])\n            //Looping through individual column names for the individual household\n            for (let column_index = 0; column_index < household_column_names.length; column_index++) {\n                // The new column name for that household\n                var new_column = household_column_names[column_index]\n\n                if (!column_names.some(column => column === new_column)) {\n\n                    if (household_index === 0) {\n                        column_names.splice(column_index, 0, new_column)\n                    }\n\n                    if (household_index > 0) {\n\n                        // Check if the previous column was in the column index\n                        if (!household_column_names[column_index - 1] !== undefined) {\n                            var index_of_previous_column_name = column_names.indexOf(household_column_names[column_index - 1])\n                            column_names.splice(index_of_previous_column_name + 1, 0, new_column)\n\n                        } else {\n                            column_names.splice(column_index + 1, 0, new_column)\n                        }\n                    }\n                }\n\n            }\n        }\n        return (\n            <>\n                <Table striped bordered hover size=\"sm\" variant=\"dark\" responsive>\n                    {/* Table header */}\n                    <thead>\n                        <tr key=\"row_1\">\n                            {column_names.map((column, column_key) => {\n                                return (<th key={\"row_1_column_\" + column_key}>{column}</th>)\n                            })}\n                        </tr>\n                    </thead>\n                    {/* Table Body */}\n                    <tbody>\n                        {full_data_set.map((household, household_key) => {\n                            return (<tr key={\"row_\" + household_key}>\n                                {column_names.map((column, column_key) => {\n                                    return (<td key={\"row_\" + household_key + \"column_\" + column_key + \"_\" + \"household_\" + household_key}>{household[column]}</td>)\n                                })}\n                            </tr>)\n                        })}\n\n                    </tbody>\n                </Table>\n            </ >)\n    }\n}\n\n// Function for converting simple json layout into CSV format\nfunction generateCSV(data) {\n    //Return nothing if the data is null\n    if (data === null) {\n        return;\n    }\n\n    // console.log(\"length \" + data.length)\n    if (data.length === undefined) {\n        return;\n    }\n\n    // Creating an empty list to include all of the lines of the csv\n    var csv_lines = []\n\n    // This is the full RHoMIS Data set\n    var full_data_set = data\n\n    // Identifying the column headers\n    // Some households have more columns than other. This merges column\n    // names in order based on the rows of each household\n    var column_names = []\n\n    // Looping through households\n    for (let household_index = 0; household_index < full_data_set.length; household_index++) {\n        // All of the column names for this individual household\n        var household_column_names = Object.keys(full_data_set[household_index])\n        //Looping through individual column names for the individual household\n        for (let column_index = 0; column_index < household_column_names.length; column_index++) {\n            // The new column name for that household\n            var new_column = household_column_names[column_index]\n            // Checking whether the new column has previously been encountered \n            if (!column_names.some(column => column === new_column)) {\n                // If this is the first househould, adds the new element at the column index\n                // not deleting any items\n                if (household_index === 0) {\n                    column_names.splice(column_index, 0, new_column)\n                }\n                // Checks if this is a household after the first household\n                if (household_index > 0) {\n                    // Check if the previous column was in the column index\n                    if (!household_column_names[column_index - 1] !== undefined) {\n                        // Looks at the column before, if it was encountered previously\n                        // we make sure this new column is added in the correct place\n                        var index_of_previous_column_name = column_names.indexOf(household_column_names[column_index - 1])\n\n                        column_names.splice(index_of_previous_column_name + 1, 0, new_column)\n\n                    } else {\n                        // If the previous column did not exist previously, we make sure to add the new column\n                        // at the end.\n                        column_names.splice(column_index + 1, 0, new_column)\n                    }\n                }\n            }\n\n\n        }\n    }\n\n    // add all of the column names, seperated by a column and a space\n    csv_lines.push(column_names.join(\", \"))\n\n    // Now push each individual household to the csv\n    var household_data = full_data_set.map((household) => {\n        var household_array = column_names.map((column) => {\n            if (household[column] !== null) {\n                return household[column]\n            } else {\n                return ''\n            }\n\n        })\n        // Join the column values by comma\n        var household_row = household_array.join(\", \")\n        return (household_row)\n\n    })\n    csv_lines = csv_lines.concat(household_data)\n\n    // Join each line and seperate by \\n\n    var csv_string = csv_lines.join('\\n')\n    return (csv_string)\n}\n\n// Getting project meta-data\nasync function fetchProjectInformation(authToken) {\n    // console.log(\"Auth Token: \" + authToken)\n    // Basic get request for metadata\n    const response = await axios({\n        method: \"get\",\n        url: process.env.REACT_APP_API_URL + \"api/meta-data/form-data\",\n        headers: {\n            'Authorization': authToken\n        }\n    })\n\n    return (response.data)\n}\n\n// Getting all data as normal\nasync function fetchData(dataType, projectName, formID, authToken) {\n    // Basic post request, fetching information by: \n    //dataType: type of data we are looking for (e.g. indicator data),\n\n    const response = await axios({\n        method: \"post\",\n        url: process.env.REACT_APP_API_URL + \"api/data\",\n        data: {\n            dataType: dataType,\n            projectID: projectName,\n            formID: formID\n        },\n        headers: {\n            'Authorization': authToken\n        }\n    })\n\n    // If the response is null return null\n    // Otherwise return the dataset.\n    var data = response.data\n    if (data === null) {\n        return null\n    } else {\n        return (data)\n    }\n}\n\n// Generating a link to download the csv data\nfunction generateDataDownloadLink(dataToDownload, dataDownloadLink) {\n    // Generating the csv string from the data we\n    // hope to download (comes in JSON format)\n    const dataCSV = generateCSV(dataToDownload)\n    // Creat e a file-like immutable objesct\n    const data = new Blob([dataCSV], { type: 'text/plain' })\n\n    // Clears the previous URL used to download the data\n    if (dataDownloadLink !== '') {\n        window.URL.revokeObjectURL(dataDownloadLink)\n    }\n    // update the download link state\n    return (window.URL.createObjectURL(data))\n}\n\n// A simple button to download the data\nfunction dataDownloadButton(dataDownloadLink, csvsAvailable, dataType, projectName, formID) {\n    if (csvsAvailable) {\n        return (<div className=\"end-button-container\">\n            <a\n                // Name of the file to download\n                download={projectName + '_' + formID + '_' + dataType + '_' + '.csv'}\n                // link to the download URL\n                href={dataDownloadLink}\n            >\n                <Button className=\"end-button\">Download Data as CSV</ Button></a>\n        </div>\n\n        )\n    }\n}\n\n// Function for ensuring the title of the drop-down updates\n// properly when a new value is selected\nfunction dropDownTitle(titleType, value) {\n    if (value === null) {\n        return (titleType)\n    }\n    return (value)\n\n}\n\n// Buttons to filter projects based on meta-data \nfunction filterButtons(projectInformationAvailable, projectInformation, projectName, setProjectName, formID, setFormID, dataType, setDataType) {\n    if (projectInformationAvailable) {\n\n        // console.log(projectInformation)\n        const projectNames = projectInformation.map(project => project.name)\n\n        // Making sure only the forms belonging to this project are shown.\n        const formIDs = []\n\n        if (projectName !== null) {\n            const project = projectInformation.filter(project => project.name === projectName)\n\n            if (project !== null) {\n                formIDs.push(project[0].forms)\n            }\n        }\n\n\n        return (\n            <>\n                <Card.Body>\n                    <p>Please use the filters below to select the data you would like to access. If the data has not been processed, or you are unsure whether it has been processed, click the \"Process Data\" button. Then click \"fetch\" data to access a preview of the dataset and make it available for download</p>\n                    <div>\n                        <div className=\"button-row\">\n\n                            <DropdownButton className=\"filter-button\" onSelect={(e) => setProjectName(e)} title={dropDownTitle(\"Project Name\", projectName)}>\n                                {projectNames.map((projectName) => {\n                                    return (<Dropdown.Item key={projectName} eventKey={projectName}>{projectName}</Dropdown.Item>)\n                                })}\n\n                            </DropdownButton>\n\n                            <DropdownButton className=\"filter-button\" onSelect={(e) => setFormID(e)} title={dropDownTitle(\"Form ID\", formID)}>\n\n\n                                {\n                                    formIDs.map((formID) => {\n\n                                        return (<Dropdown.Item key={formID} eventKey={formID}>{formID}</Dropdown.Item>)\n\n                                    })}\n                            </DropdownButton>\n\n                            <DropdownButton className=\"filter-button\" onSelect={(e) => setDataType(e)} title={dropDownTitle(\"Select Data to View\", dataType)}>\n                                <Dropdown.Item eventKey=\"processedData\">Whole Survey</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"indicatorData\">Indicator Data</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"metaData\">Meta Data</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"cropData\">Crop Data</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"livestockData\">Livestock Data</Dropdown.Item>\n                            </DropdownButton>\n                        </div>\n                    </div>\n                </Card.Body>\n\n            </>\n        )\n    }\n\n}\n\nfunction projectInformationButton(projectInformation, setProjectInformation, projectInformationAvailable, setProjectInformationAvailable, authToken) {\n\n    if (!projectInformationAvailable) {\n        return (\n            <div >\n                <Card.Body>\n\n                    <p>Click the button below to begin querying the data. This will load information on the projects and forms used for various RHoMIS projects.</p>\n                </Card.Body>\n\n                <div className=\"end-button-container\">\n\n                    <Button data-testid=\"fetchProjectButton\" className=\"end-button\" onClick={async () => {\n                        const newProjectInfo = await fetchProjectInformation(authToken)\n\n                        if (newProjectInfo !== undefined) {\n                            setProjectInformation(newProjectInfo)\n                            setProjectInformationAvailable(true)\n                        }\n                    }}>Get Project Information</Button>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nfunction fetchDataButton(projectInformationAvailable, dataType, projectName, formID, dataDownloadLink, setDataDownloadLink, setData, setcsvAvailable, authToken) {\n    if (projectInformationAvailable) {\n        return (\n            <div className=\"end-button-container\">\n                < Button className=\"end-button\" onClick={async () => {\n                    const newData = await fetchData(dataType, projectName, formID, authToken)\n                    setDataDownloadLink(generateDataDownloadLink(newData, dataDownloadLink))\n                    setData(newData)\n                    setcsvAvailable(true)\n                }\n                }>Fetch Data</Button >\n            </div>\n        )\n    }\n}\n\nasync function processData(projectName, formID, authToken) {\n    const response = await axios({\n        method: \"post\",\n        url: process.env.REACT_APP_API_URL + \"api/process-data\",\n        data: {\n            projectName: projectName,\n            formName: formID\n        },\n        headers: {\n            'Authorization': authToken\n        }\n    })\n\n    return (response)\n\n}\n\nasync function generateData(projectName, formID, authToken) {\n    const response = await axios({\n        method: \"post\",\n        url: process.env.REACT_APP_API_URL + \"api/generate-data\",\n        data: {\n            projectName: projectName,\n            formName: formID,\n            numberOfResponses: 10\n\n        },\n        headers: {\n            'Authorization': authToken\n        }\n    })\n\n    return (response)\n\n}\n\nfunction processDataButton(projectInformationAvailable, projectName, formID, authToken) {\n    if (projectInformationAvailable) {\n        return (\n            <div className=\"end-button-container\">\n                < Button className=\"end-button\" onClick={async () => {\n\n                    const dataProcessedResponse = await processData(projectName, formID, authToken)\n                    // console.log(dataProcessedResponse)\n                }\n                }>Process Data</Button >\n            </div>\n        )\n    }\n}\n\nfunction generateDataButton(projectInformationAvailable, projectName, formID, authToken) {\n    if (projectInformationAvailable) {\n        return (\n            <div className=\"end-button-container\">\n                < Button className=\"end-button\" onClick={async () => {\n\n                    const dataGeneratedResponse = await generateData(projectName, formID, authToken)\n                    // console.log(dataGeneratedResponse)\n                }\n                }>Generate Data</Button >\n            </div>\n        )\n    }\n}\n\n// Full data viewer component\nfunction DataQueryComponent(props) {\n\n    const [requestError, setRequestError] = useState(null)\n\n    const [authToken, setAuthToken] = useContext(AuthContext)\n\n    // The data we are hoping to view and download\n    const [data, setData] = useState(null)\n    // The link generated to download the data\n    const [dataDownloadLink, setDataDownloadLink] = useState('')\n    // A boolean indicating whether or not the csv is ready to download\n    const [csvsAvailable, setcsvAvailable] = useState(false)\n    // Boolean indicating whether or not project information has been downloaded yet\n    const [projectInformationAvailable, setProjectInformationAvailable] = useState(false)\n\n    // Information on what projects exist and what forms exist\n    const [projectInformation, setProjectInformation] = useState([])\n\n    // Data type we are looking for\n    const [dataType, setDataType] = useState(null)\n    const [projectName, setProjectName] = useState(null)\n\n    const [formID, setFormID] = useState(null)\n\n    return (\n        <div id=\"data-query-container\" className=\"sub-page-container\">\n\n            <h1 id=\"data-query-title\">RHoMIS 2.0 Data Querying</h1>\n            <Card >\n                <Card.Header className=\"bg-dark text-white\">Data Filters</Card.Header>\n\n                {filterButtons(projectInformationAvailable, projectInformation, projectName, setProjectName, formID, setFormID, dataType, setDataType)}\n                {projectInformationButton(projectInformation, setProjectInformation, projectInformationAvailable, setProjectInformationAvailable, authToken)}\n                {generateDataButton(projectInformationAvailable, projectName, formID, authToken)}\n                {processDataButton(projectInformationAvailable, projectName, formID, authToken)}\n                {fetchDataButton(projectInformationAvailable, dataType, projectName, formID, dataDownloadLink, setDataDownloadLink, setData, setcsvAvailable, authToken)}\n\n                {/* {filterButtons(projectInformationAvailable, projectInformation, projectName, setProjectName, formID, setFormID, dataType, setDataType)}\n                {projectInformationButton(projectInformation, setProjectInformation, projectInformationAvailable, setProjectInformationAvailable, props.authToken)}\n                {generateDataButton(projectInformationAvailable, projectName, formID, props.authToken)}\n                {processDataButton(projectInformationAvailable, projectName, formID, props.authToken)}\n                {fetchDataButton(projectInformationAvailable, dataType, projectName, formID, dataDownloadLink, setDataDownloadLink, setData, setcsvAvailable, props.authToken)} */}\n            </Card>\n\n            {renderTable(data)}\n            {dataDownloadButton(dataDownloadLink, csvsAvailable, dataType, projectName, formID)}\n        </div >\n    )\n}\n\n\n// Export all of the functions as want to ensure\n// that they work for testing purposes\nexport {\n    DataQueryComponent,\n    renderTable,\n    generateCSV,\n    fetchProjectInformation,\n    fetchData,\n    generateDataDownloadLink,\n    dataDownloadButton,\n    dropDownTitle,\n    filterButtons,\n    projectInformationButton,\n    fetchDataButton\n}\n\n","// Copyright (C) 2022 Léo Gorman\n// \n// This file is part of rhomis-data-app.\n// \n// rhomis-data-app is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// rhomis-data-app is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with rhomis-data-app.  If not, see <http://www.gnu.org/licenses/>.\n\n/**/\n\nimport React, { useState, useContext, useEffect } from 'react'\nimport { Button, Card, Form, Spinner, Row, Col } from 'react-bootstrap'\nimport Fade from 'react-bootstrap/Fade'\nimport { FaUserCircle } from 'react-icons/fa'\nimport axios from 'axios'\nimport { useHistory } from 'react-router'\nimport \"./register-component.css\"\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport PasswordStrengthBar from 'react-password-strength-bar';\n\n\nfunction timeout(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nfunction CheckCredentials(props) {\n    if (props.email === null) {\n        props.setRequestError(\"No email given\")\n        return false\n    }\n    if (props.password === null) {\n        props.setRequestError(\"No password given\")\n        return false\n    }\n\n    return true\n}\n\nfunction RegistrationCard(props) {\n    // console.log(\"site key\")\n    // console.log(process.env)\n\n    console.log(props)\n\n    const [title, setTitle] = useState(\"\")\n\n    const [password, setPassword] = useState(\"\")\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\n\n    const [email, setEmail] = useState(\"\")\n    const [confirmEmail, setConfirmEmail] = useState(\"\")\n\n    const [firstName, setfirstName] = useState(\"\")\n    const [surname, setSurname] = useState(\"\")\n    // const [institution, setInstitution] = useState(\"\")\n    // const [description, setDescription] = useState(\"\")\n\n    const [loading, setLoading] = useState(false)\n    const [requestError, setRequestError] = useState(null)\n\n    const [captchaToken, setCaptchaToken] = useState(null)\n\n    const history = useHistory()\n\n    let passwordsMatch = password === confirmPassword\n    let bothPasswordsEntered = (password.length > 0 && confirmPassword.length > 0)\n\n    let emailsMatch = email === confirmEmail\n    let bothEmailsEntered = (email.length > 0 && confirmEmail.length > 0)\n\n    let registrationEnabled = true\n\n    console.log(passwordsMatch)\n    console.log(bothPasswordsEntered)\n    console.log(emailsMatch)\n    console.log(bothEmailsEntered)\n    console.log(title.length > 0)\n    console.log(firstName.length > 0)\n    console.log(surname.length > 0)\n    console.log(emailsMatch)\n    console.log(bothEmailsEntered)\n    console.log(title.length > 0)\n    console.log(firstName.length > 0)\n    console.log(surname.length > 0)\n    console.log(captchaToken)\n\n\n    if (passwordsMatch &&\n        bothPasswordsEntered &&\n        emailsMatch &&\n        bothEmailsEntered &&\n        title.length > 0 &&\n        firstName.length > 0 &&\n        surname.length > 0 &&\n        captchaToken) {\n        registrationEnabled = false\n    }\n\n    return (\n        <Card className=\"card-style border-0 registration-card\">\n            <Card.Header className=\"bg-dark text-white\">\n                <h2>Signup</h2>\n            </Card.Header>\n            <Card.Body>\n                {/* <div className=\"icon-container\">\n                    <FaUserCircle size={60} />\n                </div> */}\n                <Form style={{ \"marginLeft\": \"3em\", \"marginRight\": \"3em\" }}>\n                    <Row>\n                        <Col xs={3}>\n                            <Form.Group className=\"form-group-spaced\">\n                                <Form.Label htmlFor=\"email\">Title</Form.Label>\n                                <Form.Select id=\"title\" defaultValue=\"Select\" onChange={(event) => setTitle(event.target.value)} >\n                                    <option disabled=\"true\">Select</option>\n                                    <option value=\"ms\">Ms</option>\n                                    <option value=\"misss\">Miss</option>\n                                    <option value=\"mrs\">Mrs</option>\n                                    <option value=\"dr\">Dr</option>\n                                    <option value=\"mr\">Mr</option>\n                                    <option value=\"mx\">Mx</option>\n                                </Form.Select>\n                            </Form.Group>\n                        </Col>\n                        <Col xs={4}>\n                            <Form.Group className=\"form-group-spaced\">\n                                <Form.Label htmlFor=\"name\">First Name</Form.Label>\n                                <Form.Control id=\"name\" type=\"text\" onChange={(event) => setfirstName(event.target.value)} />\n                            </Form.Group>\n                        </Col>\n                        <Col xs={5}>\n                            <Form.Group className=\"form-group-spaced\">\n                                <Form.Label htmlFor=\"surname\">Surname</Form.Label>\n                                <Form.Control id=\"surname\" type=\"text\" onChange={(event) => setSurname(event.target.value)} />\n                            </Form.Group>\n                        </Col>\n\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Form.Group className=\"form-group-spaced\">\n                                <Form.Label htmlFor=\"email\">Email</Form.Label>\n                                <Form.Control id=\"email\" type=\"text\" onChange={(event) => setEmail(event.target.value)} />\n                            </Form.Group>\n                        </Col>\n\n                        <Col>\n                            <Form.Group className=\"form-group-spaced\">\n                                <Form.Label htmlFor=\"email\">Confirm Email</Form.Label>\n                                <Form.Control id=\"confirmemail\" type=\"text\" onChange={(event) => setConfirmEmail(event.target.value)} />\n                            </Form.Group>\n                            {bothEmailsEntered ?\n                                <Form.Text style={{ \"textAlign\": \"end\" }}>{emailsMatch ? \"Emails match\" : \"Emails don't match\"}</Form.Text> :\n                                <></>}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n\n                            <Form.Group className=\"form-group-spaced\">\n                                <Form.Label htmlFor=\"password\">Password</Form.Label>\n                                <Form.Control type=\"password\" onChange={(event) => {\n                                    setPassword(event.target.value)\n                                }} />\n\n                            </Form.Group>\n\n                            <PasswordStrengthBar password={password} />\n                        </Col>\n                        <Col>\n                            <Form.Group className=\"form-group-spaced\">\n                                <Form.Label htmlFor=\"password\">Confirm Password</Form.Label>\n                                <Form.Control type=\"password\" onChange={(event) => {\n                                    setConfirmPassword(event.target.value)\n                                }} />\n                                {bothPasswordsEntered ?\n                                    <Form.Text style={{ \"textAlign\": \"end\" }}>{passwordsMatch ? \"Passwords match\" : \"Passwords don't match\"}</Form.Text> :\n                                    <></>}\n\n                            </Form.Group>\n                        </Col>\n\n                    </Row>\n                    {requestError ? <p className=\"warning\">{requestError}</p> : null}\n                    <div className=\"icon-container\">\n\n                        <ReCAPTCHA\n                            sitekey={process.env.REACT_APP_RECAPTCHA_SITE_KEY}\n                            onChange={async (value) => {\n                                setCaptchaToken(value)\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"button-container\">\n                        {loading ? <Button className=\"login-buttons\" variant=\"dark\">\n                            <Spinner\n                                as=\"span\"\n                                animation=\"border\"\n                                size=\"sm\"\n                                role=\"status\"\n                                aria-hidden=\"true\"\n                            />\n                            Loading...</Button> : <Button disabled={registrationEnabled} className=\"login-buttons\" variant=\"dark\" onClick={async (event) => {\n                                setLoading(true)\n\n                                const registrationResult = await RegisterUser({\n                                    event: event,\n                                    title: title,\n                                    firstName: firstName,\n                                    surname: surname,\n                                    email: email,\n                                    password: password,\n                                    captchaToken: captchaToken,\n                                    requestError: requestError,\n                                    setRequestError: setRequestError,\n                                })\n                                setLoading(false)\n\n                                if (registrationResult.status > 199 || registrationResult.status < 300) {\n                                    history.push(\"/#/login\")\n                                    // props.setCardType(!props.cardType)\n\n                                }\n                                console.log(\"registrationResult\")\n                                console.log(registrationResult)\n\n                            }}>Register</Button>\n                        }\n                    </div>\n                    <div style={{ textAlign: \"center\", width: \"100%\" }}>\n                        Already got an account?&nbsp;\n                        <a href=\"/#/login\" >Click here</a> for login\n                    </div>\n                </Form>\n            </Card.Body>\n        </Card >\n    )\n}\n\n\n\n\nasync function RegisterUser(props) {\n    // Stop the page from refreshing\n    props.event.preventDefault()\n    props.setRequestError(null)\n\n\n\n    // check all of the details given\n    const credentialsGiven = CheckCredentials({\n        title: props.title,\n        firstName: props.firstName,\n        surname: props.surname,\n        email: props.email,\n        password: props.password,\n        requestError: props.requestError,\n        setRequestError: props.setRequestError,\n        captchaToken: props.captchaToken\n\n    })\n    try {\n        // await timeout(2000)\n\n        const response = await axios({\n            method: \"post\",\n            url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/user/register\",\n            data: {\n                // username: username,\n                title: props.title,\n                firstName: props.firstName,\n                surname: props.surname,\n                email: props.email,\n                password: props.password,\n                captchaToken: props.captchaToken\n\n            }\n        })\n        console.log(response)\n        return (response)\n\n    } catch (err) {\n        console.log(err)\n        props.setRequestError(err.response.data)\n        return (err.response)\n\n    }\n}\n\nfunction RegisterComponent(props) {\n    const [open, setOpen] = useState(false)\n\n    useEffect(() => {\n        setOpen(true)\n    }, [])\n\n    return (\n        <Fade in={open}>\n\n            <div className=\"child-login-container\">\n                <RegistrationCard />\n            </div >\n        </Fade>\n    )\n}\n\nexport {\n    RegisterComponent,\n    CheckCredentials,\n    RegistrationCard,\n    RegisterUser\n}","// Copyright (C) 2022 Léo Gorman\n// \n// This file is part of rhomis-data-app.\n// \n// rhomis-data-app is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// rhomis-data-app is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with rhomis-data-app.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { RiSurveyFill } from 'react-icons/ri'\nimport { VscInspect } from 'react-icons/vsc'\nimport { FcAcceptDatabase } from 'react-icons/fc'\nimport { FiDatabase } from 'react-icons/fi'\nimport { MdHelpOutline, MdOutlineDashboardCustomize, MdOutlineSendToMobile, MdOutlineCreate } from 'react-icons/md'\nexport const PortalDataAll = [\n    {\n        name: \"Build a Survey\",\n        label: \"surveyBuilder\",\n        text: \"Get started straight away. Build a survey, collect test-data, and view your data.\",\n        icon: RiSurveyFill,\n        link: \"https://rhomis-survey.stats4sdtest.online/login/\",\n        external: true,\n    },\n    {\n        name: \"Manage My Projects\",\n        label: \"projectManager\",\n        text: \"Check up on your projects, download your data, and control user access.\",\n        icon: MdOutlineDashboardCustomize,\n        link: \"/projects\",\n        external: false,\n\n    },\n\n    {\n        name: \"Collect Data\",\n        label: \"dataCollector\",\n        text: \"Collect data for an existing project and access enumerator training materials\",\n        icon: MdOutlineSendToMobile,\n        link: \"/projects\",\n        external: false,\n\n\n    },\n    {\n        name: \"Global Dataset\",\n        label: \"globalData\",\n        text: \"Query publicly available survey data by time, location, and content.\",\n        icon: FiDatabase,\n        link: \"/global-data\",\n        external: false,\n\n\n    },\n    {\n        name: \"Help\",\n        label: \"help\",\n        text: \"See guidance for more advanced use case and how to contribute to our system\",\n        icon: MdHelpOutline,\n        link: \"https://rhomis-docs.readthedocs.io/en/latest/\",\n        external: true,\n    },\n    {\n        name: \"Administration\",\n        label: \"administrator\",\n        text: \"Create projects and forms (only used for development)\",\n        icon: MdOutlineCreate,\n        link: \"/administration\",\n        external: false,\n    }\n]\n\n","// Copyright (C) 2022 Léo Gorman\n// \n// This file is part of rhomis-data-app.\n// \n// rhomis-data-app is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// rhomis-data-app is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with rhomis-data-app.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Component, useState, useEffect, useContext } from 'react'\nimport { Form, Card, Table, Button } from 'react-bootstrap'\nimport { Link } from 'react-router-dom';\nimport AuthContext from '../authentication-component/AuthContext';\n\nimport axios from 'axios';\n\nimport { Redirect, useHistory } from 'react-router';\n\nimport { PortalDataAll } from './portal-data'\n\nimport './portal-component.css'\nimport '../../App.css'\n\n\n\n\n\nasync function FetchProjectInformation(authToken) {\n\n    // Basic get request for metadata\n    const response = await axios({\n        method: \"get\",\n        url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/user/\",\n        headers: {\n            'Authorization': authToken\n        }\n    })\n    console.log(response.data)\n\n    return (response.data)\n}\n\nfunction PortalCard(props) {\n    const Icon = props.data.icon\n    const history = useHistory()\n\n\n\n    if (props.data.external === false) {\n        return (\n            <div onClick={() => { history.push(props.data.link) }}\n            >\n                < Card key={\"card-\" + props.data.name} className=\"sub-card portal-card border-0\">\n                    <div key={\"header-container-\" + props.data.name} className=\"portal-card-header-container\">\n                        <h4 key={\"card-header-\" + props.data.name} className=\"portal-card-header\">{props.data.name}</h4>\n                    </div>\n                    <div key={\"icon-container-\" + props.data.name} className=\"portal-icon-container\">\n                        <Icon size={100} color=\"white\" />\n                    </div>\n                </Card >\n            </div>\n        )\n    }\n\n    if (props.data.external === true & props.data.label === \"surveyBuilder\") {\n        console.log(\"Auth token\")\n\n        console.log(props.authToken)\n        return (\n            <div>\n                <form method=\"post\" action={props.data.link} class=\"inline\">\n                    <input type=\"hidden\" name=\"token\" value={props.authToken} />\n                    {/* <input type=\"hidden\" name=\"X-XSRF-TOKEN\" value={\"eyJpdiI6IndJR29DYUNDbjQ5eG1taWJUVjJ1NVE9PSIsInZhbHVlIjoiVisvTVNCc2puS1ZsZWlhYnZBbHpMd01odksyWm9laG9UdE45N3dHcWp5c3hNRWNuK3FCbVRPa0xTcEZoNXhPSWxtbUFZUFdxbTY3a0RrVU5UWUQwOG0wTGRQL1lINC9kT3NndkVGeWtPVTFtTlc5clBnYWN4NmF0MGxxTGhtcUciLCJtYWMiOiIxZTUyMjJhZDFhZjNiNzMwZTZlZTQxZTM4NTJhNzk2OTY5OGM3ODUwZDU1NzliNTUwYjRiNTVlYmM3ZjJkNzc4IiwidGFnIjoiIn0%3D\"} /> */}\n                    <input type=\"hidden\" name=\"redirect_url\" value=\"/admin/xlsform/create\" />\n                    <button type=\"submit\" style={{ margin: 0, padding: 0, border: 0, backgroundColor: \"white\" }}>\n\n\n                        < Card key={\"card-\" + props.data.name} className=\"sub-card portal-card border-0\">\n                            <div key={\"header-container-\" + props.data.name} className=\"portal-card-header-container\">\n                                <h4 key={\"card-header-\" + props.data.name} className=\"portal-card-header\">{props.data.name}</h4>\n                            </div>\n                            <div key={\"icon-container-\" + props.data.name} className=\"portal-icon-container\">\n                                <Icon size={100} color=\"white\" />\n                            </div>\n                        </Card >\n                    </button >\n                </form>\n\n            </div >\n        )\n    }\n\n\n\n    if (props.data.external === true & props.data.label !== \"surveyBuilder\") {\n        return (\n            <div>\n                <Link style={{ 'textDecoration': 'none' }} target=\"_blank\" to={{ pathname: props.data.link }}>\n                    < Card className=\"sub-card portal-card border-0\">\n                        <div className=\"portal-card-header-container\">\n                            <h4 className=\"portal-card-header\">{props.data.name}</h4>\n                        </div>\n                        <div className=\"portal-icon-container\">\n\n                            <Icon size={100} color=\"white\" />\n                        </div>\n                    </Card >\n                </Link>\n\n            </div >\n        )\n    }\n}\n\n\nfunction RenderPortalCards(props) {\n\n    const portalCardData = []\n    console.log(props.data[0])\n    console.log(props.userData)\n\n    if (props.userData) {\n        if (props.userData.basic === true) {\n            const cardToAdd = props.data.filter(item => item.label === \"surveyBuilder\")\n            portalCardData.push(...cardToAdd)\n        }\n        if (props.userData.dataCollector.length > 0) {\n            const cardToAdd = props.data.filter(item => item.label === \"dataCollector\")\n            portalCardData.push(...cardToAdd)\n        }\n\n        if (props.userData.projectManager.length > 0 | props.userData.analyst.length > 0) {\n            const cardToAdd = props.data.filter(item => item.label === \"projectManager\")\n            portalCardData.push(...cardToAdd)\n        }\n\n        if (props.userData.researcher.length > 0) {\n            const cardToAdd = props.data.filter(item => item.label === \"globalData\")\n            portalCardData.push(...cardToAdd)\n        }\n\n        if (props.userData.administrator === true) {\n            const cardToAdd = props.data.filter(item => item.label === \"administrator\")\n            portalCardData.push(...cardToAdd)\n        }\n\n\n        if (props.userData.basic === true) {\n            const cardToAdd = props.data.filter(item => item.label === \"help\")\n            portalCardData.push(...cardToAdd)\n        }\n\n    }\n\n    if (!props.userData) {\n        portalCardData.push(props.data[0])\n    }\n\n\n\n    return (\n        <>\n            {portalCardData.map((PortalItem) => {\n                return <PortalCard data={PortalItem} authToken={props.authToken} />\n            })\n            }\n        </>\n    )\n\n}\n\nexport default function PortalComponent() {\n\n    const [userData, setUserData] = useState(null)\n    const [useInfoAvail, setUserInfoAvail] = useState(false)\n    const [authToken, setAuthToken] = useContext(AuthContext)\n\n    useEffect(async () => {\n        const newUserData = await FetchProjectInformation(authToken\n        )\n        setUserData(newUserData)\n        setUserInfoAvail(true)\n    }, [])\n\n    return (\n        <div className=\"sub-page-container\">\n            <Card className=\"main-card border-0\">\n                <Card.Header className=\"bg-dark text-white\">\n                    <h3 >Portal</h3>\n                </Card.Header>\n                <Card.Body className=\"main-card-body\">\n                    <RenderPortalCards data={PortalDataAll} userData={userData} authToken={authToken} />\n\n                </Card.Body>\n            </Card>\n\n        </div >\n    )\n\n}\n","// Copyright (C) 2022 Léo Gorman\n// \n// This file is part of rhomis-data-app.\n// \n// rhomis-data-app is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// rhomis-data-app is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with rhomis-data-app.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { createContext } from 'react';\n\nconst UserContext = createContext()\n\nexport default UserContext;","import axios from 'axios'\n\nasync function FetchUserInformation(props) {\n    const response = await axios({\n        method: \"get\",\n        url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/meta-data/\",\n        headers: {\n            'Authorization': props.authToken\n        }\n    })\n    console.log(\"user info\")\n    console.log(response.data)\n    props.setUserInfo(response.data)\n    // return (response.data)\n}\n\nfunction CheckUserInformation() {\n\n}\n\nfunction CheckForLocalToken(props) {\n    const localToken = localStorage.getItem(\"userToken\")\n\n    const currentDate = new Date()\n    const localTokenCreationTime = new Date(localStorage.getItem(\"createdAt\"))\n\n    console.log(\"Difference\")\n    console.log(currentDate.getTime() - localTokenCreationTime.getTime())\n\n    const timeDifference = currentDate.getTime() - localTokenCreationTime.getTime()\n    if (timeDifference < 60 * 60 * 1000) {\n        props.setAuthToken(localToken)\n    }\n\n    return localToken\n}\n\n\nasync function GetFormInformation(props) {\n\n    const result = await axios({\n        method: 'post',\n        url: process.env.REACT_APP_API_URL + \"api/project-data\",\n        headers: {\n            'Authorization': props.authToken\n        },\n        data: {\n            projectName: props.projectName,\n            formName: props.formName\n        }\n    })\n\n\n    if (result.status === 200) {\n\n        props.setFormData(result.data)\n    }\n    if (result.status === 400) {\n        alert(result.data)\n    }\n\n}\n\nasync function GetInformationForFormComponent(props){\n\n    const authToken = await CheckForLocalToken({setAuthToken:props.setAuthToken})\n    FetchUserInformation({authToken:authToken,\n    setUserInfo:props.setUserInfo})\n\n    GetFormInformation({\n        authToken:authToken,\n        projectName:props.projectName,\n        formName:props.formName,\n        setFormData:props.setFormData\n    })\n}\n\n\nexport {\n    CheckForLocalToken,\n    FetchUserInformation,\n    GetFormInformation,\n    GetInformationForFormComponent\n}","import React, { useState, useEffect, useContext } from 'react'\nimport { Form, Button, Card, Table } from 'react-bootstrap'\nimport axios from 'axios'\nimport AuthContext from '../authentication-component/AuthContext'\nimport UserContext from '../user-info-component/UserContext'\nimport './project-management-component.css'\nimport '../../App.css'\n\n\nimport { useHistory } from 'react-router'\n\nimport { AiOutlineArrowLeft } from 'react-icons/ai'\n\nimport QRCode from 'react-qr-code'\nimport { deflateSync } from 'zlib'\n\nimport { FetchUserInformation, CheckForLocalToken } from '../fetching-context-info/fetching-context-info'\n\n\n// async function GetProjectInformation(props) {\n//     console.log(\"authToken: \", props.authToken)\n//     const result = await axios({\n//         method: 'get',\n//         url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/meta-data\",\n//         headers: {\n//             'Authorization': props.authToken\n//         }\n//     })\n\n//     console.log(\"response: \")\n//     console.log(result)\n//     if (result.status === 200) {\n//         console.log(\"Setting project information\")\n\n//         props.setAdminData(result.data)\n//     }\n//     if (result.status === 400) {\n//         alert(result.data)\n//     }\n// }\n\n\nfunction NoProjectFound() {\n\n    return (\n        <div>\n            <Table striped bordered hover>\n                <thead key=\"table-header\">\n                    <tr key=\"table-row-1\">\n\n                        <th key=\"table-head-item-1\">Project Name</th>\n                        <th key=\"table-head-item-2\">Description</th>\n                        <th key=\"table-head-item-3\">Created at</th>\n\n\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td style={{ \"text-align\": \"center\" }} colSpan={3}>No projects found</td>\n                    </tr>\n\n                </tbody>\n\n            </Table>\n        </div >\n    )\n}\n\nfunction RenderProjectInformation(props) {\n\n    const history = useHistory()\n    console.log(props)\n    if (!props.data) {\n        return (<NoProjectFound />)\n\n\n    }\n\n    if (!props.data.projects) {\n        return (<NoProjectFound />)\n    }\n\n\n    if (props.data.projects.length === 0) {\n        return (<NoProjectFound />)\n    }\n\n\n    if (props.data.projects !== undefined) {\n        return (\n            <div>\n                <Table striped bordered hover>\n                    <thead key=\"table-header\">\n                        <tr key=\"table-row-1\">\n                            <th key=\"table-head-item-1\">Project Name</th>\n                            <th key=\"table-head-item-2\">Description</th>\n                            <th key=\"table-head-item-3\">Created at</th>\n                            <th key=\"table-head-item-4\"></th>\n                        </tr>\n                    </thead>\n                    <tbody key=\"table-body\">\n                        {props.data.projects.map((project, index) => {\n                            let date = new Date(project.createdAt)\n                            let dateString = date.toDateString()\n                            return (\n                                <tr key={\"table-row-\" + index}>\n\n                                    <td key={\"table-row-\" + index + \"-item-1\"}>{project.name}</td>\n                                    <td key={\"table-row-\" + index + \"-item-2\"}>{project.description}</td>\n                                    <td key={\"table-row-\" + index + \"-item-3\"}>{dateString}</td>\n                                    <td key={\"table-row-\" + index + \"-item-4\"}>\n                                        <Button className=\"bg-dark text-white border-0\" onClick={() => {\n                                            history.push(\"/projects/\" + project.name)\n                                            // props.setProjectSelected(project.name)\n                                            // const currentFilters = props.filters\n                                            // currentFilters.push(\"Project: \" + project.name)\n                                            // props.setFilters(currentFilters)\n                                            // props.setTitle(\"Select a Form\")\n                                        }}>\n                                            Select\n                                        </Button></td>\n                                </tr>\n                            )\n\n                        })}\n\n                    </tbody>\n                </Table>\n            </div>\n\n\n        )\n    }\n\n}\n\nfunction BackButton(props) {\n\n    if (props.filters.length === 1) {\n        props.setProjectSelected(false)\n        props.setFilters([])\n        props.setTitle(\"Select a Project\")\n    }\n\n    if (props.filters.length === 2) {\n        props.setFormSelected(false)\n        const newFilters = props.filters[0]\n        props.setFilters([newFilters])\n        props.setTitle(\"Select a Form\")\n\n    }\n\n}\n\nexport default function ProjectManagementComponent(props) {\n\n    const history = useHistory()\n\n    const [authToken, setAuthToken] = useContext(AuthContext)\n\n    const [adminData, setAdminData] = useContext(UserContext)\n\n\n    const [filters, setFilters] = useState([])\n\n    const [title, setTitle] = useState(\"Select a Project\")\n\n    // const [projectName, setProjectName] = useState(null)\n\n    const [projectSelected, setProjectSelected] = useState(false)\n    const [formSelected, setFormSelected] = useState(false)\n\n    useEffect(async () => {\n        console.log(\"Effect running\")\n        await FetchUserInformation({\n            authToken: authToken,\n            setUserInfo: setAdminData\n        })\n    }, [])\n\n\n    return (\n        <div id=\"project-management-container\" className=\"sub-page-container\">\n\n            <Card className=\"main-card border-0\">\n                <Card.Header className=\" bg-dark text-white\">\n                    <div className=\"main-card-header-container\">\n                        <h3>{title}</h3>\n                        <div style={{ \"display\": \"flex\", \"flex-direction\": \"row\", \"margin-left\": \"auto\" }} >\n                            {/* Render the filters in the top of the card */}\n                            {filters ? filters.map((filter) => {\n                                return <div className=\"main-card-header-item\">{filter}</div>\n                            }) : ''}\n                            {/* Render the refresh button if no  */}\n                            {filters.length > 0 ?\n                                <Button className=\"bg-dark border-0\" onClick={() => {\n                                    BackButton({\n                                        setProjectSelected: setProjectSelected,\n                                        setFilters: setFilters,\n                                        filters: filters,\n                                        setFormSelected: setFormSelected,\n                                        setTitle: setTitle,\n\n                                    })\n                                }}>\n                                    <AiOutlineArrowLeft size={25} />\n                                </Button> :\n                                <Button className=\"bg-dark border-0\" onClick={() => {\n                                    history.push(\"/\")\n\n                                }\n                                }><AiOutlineArrowLeft size={25} /></Button>}\n                        </div>\n                    </div>\n\n\n                </Card.Header>\n\n                <Card.Body className=\"main-card-body\">\n                    <RenderProjectInformation data={adminData} setProjectSelected={setProjectSelected} filters={filters} setFilters={setFilters} setTitle={setTitle} />\n\n\n\n                </Card.Body>\n            </Card >\n        </div >\n    )\n}\n","// Copyright (C) 2022 Léo Gorman\n// \n// This file is part of rhomis-data-app.\n// \n// rhomis-data-app is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// rhomis-data-app is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with rhomis-data-app.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useParams } from \"react-router-dom\"\nimport { FetchUserInformation } from '../fetching-context-info/fetching-context-info'\n\n\n\nimport React, { useState, useEffect, useContext } from 'react'\nimport { Form, Button, Card, Table, CardGroup } from 'react-bootstrap'\nimport axios from 'axios'\nimport AuthContext from '../authentication-component/AuthContext'\nimport UserContext from \"../user-info-component/UserContext\"\nimport '../project-management-component/project-management-component.css'\nimport '../../App.css'\n\n\nimport { useHistory } from 'react-router'\n\nimport { AiOutlineArrowLeft } from 'react-icons/ai'\n\nimport QRCode from 'react-qr-code'\nimport { deflateSync } from 'zlib'\n\n// Generating a link to download the csv data\n\n\nasync function FinalizeForm(props) {\n\n    console.log(\"Finalizing form\")\n\n    const result = await axios({\n        method: 'post',\n        url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/forms/publish\",\n        headers: {\n            'Authorization': props.authToken\n        },\n        params: {\n            form_name: props.form,\n            project_name: props.project\n        }\n    })\n\n    FetchUserInformation({\n        authToken: props.authToken,\n        setUserInfo: props.setAdminData\n    })\n\n    // console.log(\"Finalization response\")\n    // console.log(result)\n\n}\n\n\nfunction NoInfoFound() {\n    return (\n        <Table striped bordered hover>\n            <thead>\n                <tr>\n                    <th>Form Name</th>\n                    <th>Status</th>\n\n                    <th>Created At</th>\n\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td colSpan={3}>Forms Not Found</td>\n                </tr>\n            </tbody>\n\n        </Table >\n    )\n\n\n}\n\nfunction FormTables(props) {\n\n    const history = useHistory()\n    console.log(\"Render project admin props\")\n    console.log(props)\n\n    let allowToFinalize = false\n    if (!props.data) {\n        return (<NoInfoFound />)\n    }\n    if (!props.data.user) {\n        return (<NoInfoFound />)\n    }\n    if (!props.data.user.roles) {\n        return (<NoInfoFound />)\n    }\n    if (props.data.user.roles.projectManager !== undefined) {\n        if (props.data.user.roles.projectManager.includes(props.projectSelected))\n            allowToFinalize = true\n    }\n\n    let formsExist = false\n\n    if (props.data.forms !== undefined) {\n\n        if (props.data.forms.length > 0) {\n            let formsForProject = props.data.forms.filter((form) => form.project === props.projectSelected)\n            formsExist = formsForProject.length > 0\n\n            console.log(\"formsForProject\")\n            console.log(formsForProject)\n        }\n    }\n\n\n    return (\n        <Table striped bordered hover>\n            <thead>\n                <tr>\n                    <th>Form Name</th>\n                    <th>Status</th>\n\n                    <th>Created At</th>\n                    <th style={{ \"width\": \"40px\" }}></th>\n                    <th style={{ \"width\": \"40px\" }}></th>\n                </tr>\n            </thead>\n            <tbody>\n                {formsExist ? props.data.forms.map((form) => {\n                    let date = new Date(form.createdAt)\n                    let dateString = date.toDateString()\n                    if (form.project === props.projectSelected) {\n\n                        let disableButton = true\n\n                        if (allowToFinalize === false) {\n                            disableButton = false\n                        }\n\n                        if (form.draft) {\n                            disableButton = false\n                        }\n\n                        return (\n                            <tr>\n                                <td>{form.name}</td>\n                                <td>{form.draft ? \"Draft\" : \"Finalized\"}</td>\n                                <td >{dateString}</td>\n                                <td style={{ \"width\": \"40px\" }}>\n                                    <Button disabled={disableButton} className=\"bg-dark text-white border-0\"\n                                        onClick={async () => {\n\n                                            const finalizedForm = await FinalizeForm({\n                                                form: form.name,\n                                                project: props.projectSelected,\n                                                authToken: props.authToken,\n                                                setAdminData: props.setAdminData\n                                            })\n\n                                            // const metaData = await GetProjectInformation({\n                                            //     setAdminData: props.setAdminData,\n                                            //     authToken: props.authToken\n                                            // })\n\n                                        }}>Finalize</Button></td>\n                                <td style={{ \"width\": \"40px\" }}><Button className=\"bg-dark text-white border-0\"\n                                    onClick={() => {\n\n                                        history.push(\"/projects/\" + props.projectSelected + \"/forms/\" + form.name)\n                                        // props.setFormSelected(form.name)\n                                        // const newFilters = props.filters\n                                        // newFilters.push(\"Form: \" + form.name)\n                                        // props.setFilters(newFilters)\n                                    }}>Select</Button></td>\n                            </tr>\n                        )\n                    }\n\n                }) : <><tr><td style={{ \"text-align\": \"center\" }} colSpan={5}>No forms created yet</td></tr></>}\n                {/* <tr><td style={{ \"text-align\": \"center\" }} colSpan={5}><a href=\"https://rhomis-survey.stats4sdtest.online\"><Button >Start Creating a Survey</Button></a></td></tr></>} */}\n            </tbody>\n\n        </Table >\n    )\n}\n\n\n\nasync function AddProjectManager(props) {\n\n    try {\n        const result = await axios({\n            method: 'post',\n            url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/user/project-manager\",\n            headers: {\n                'Authorization': props.authToken\n            },\n            data: {\n                projectName: props.projectName,\n                email: props.email\n            }\n        })\n        console.log(result)\n        return (result)\n    } catch (err) {\n        return (err)\n    }\n}\n\nfunction RenderProjectAdmin(props) {\n    let renderUserForm = false\n\n    const [newUser, setNewUser] = useState('')\n\n    if (!props.data) {\n        return (<NoInfoFound />)\n    }\n    if (!props.data.user) {\n        return (<NoInfoFound />)\n    }\n    if (!props.data.user.roles) {\n        return (<NoInfoFound />)\n    }\n\n    if (props.data.user.roles.projectManager !== undefined) {\n        if (props.data.user.roles.projectManager.includes(props.projectSelected))\n            renderUserForm = true\n    }\n\n    return (<>\n        <Card className=\"project-management-card\">\n            <Card.Header as=\"h5\">Select a Form</Card.Header>\n            <Card.Body>\n                {/* <Card.Title>Special title treatment</Card.Title> */}\n                <FormTables projectSelected={props.projectSelected} authToken={props.authToken} setAdminData={props.setAdminData} data={props.data} filters={props.filters} setFilters={props.setFilters} setFormSelected={props.setFormSelected} />\n            </Card.Body>\n        </Card>\n\n        {renderUserForm ? <Card className=\"project-management-card\">\n            <Card.Header as=\"h5\">Add Project Manager</Card.Header>\n            <Card.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>User email</Form.Label>\n                        <Form.Control onChange={(event) => {\n                            setNewUser(event.target.value)\n                        }} />\n                    </Form.Group>\n                    <Button className=\"bg-dark text-white border-0 float-right\" style={{ \"marginTop\": \"10px\" }}\n                        onClick={async () => {\n                            console.log(props.projectSelected)\n                            const result = await AddProjectManager({\n                                email: newUser,\n                                projectName: props.projectSelected,\n                                authToken: props.authToken\n                            })\n                            console.log(result)\n                        }}>Add Project Manager</Button>\n                </Form>\n            </Card.Body>\n        </Card> : <></>}\n\n\n\n\n    </>\n\n    )\n\n}\n\n\n\n\nfunction FormManagementComponent() {\n    // const { projectName } = useParams()\n\n    const history = useHistory()\n    const projectSelected = useParams().projectName\n    const [authToken, setAuthToken] = useContext(AuthContext)\n    const [adminData, setAdminData] = useContext(UserContext)\n\n    console.log(\"admin data\")\n    console.log(adminData)\n\n    const [formSelected, setFormSelected] = useState(null)\n    const [filters, setFilters] = useState(null)\n    const data = null\n\n    useEffect(() => {\n        FetchUserInformation({\n            authToken: authToken,\n            setUserInfo: setAdminData\n        })\n    }, [])\n\n    return (\n\n        <div id=\"project-management-container\" className=\"sub-page-container\">\n\n            <Card className=\"main-card border-0\">\n                <Card.Header className=\" bg-dark text-white\">\n                    <div className=\"main-card-header-container\">\n                        <h3>Form Overview</h3>\n                        <div style={{ \"display\": \"flex\", \"flex-direction\": \"row\", \"margin-left\": \"auto\" }} >\n                            <div className=\"main-card-header-item\">{projectSelected}</div>\n                            <Button className=\"bg-dark border-0\" onClick={() => {\n                                history.push(\"/projects\")\n                            }}>\n                                <AiOutlineArrowLeft size={25} />\n                            </Button>\n                        </div>\n                    </div>\n                </Card.Header>\n                <Card.Body className=\"main-card-body\">\n                    <RenderProjectAdmin\n                        authToken={authToken}\n                        projectSelected={projectSelected}\n                        formSelected={formSelected}\n                        setAdminData={setAdminData}\n                        data={adminData}\n                        setFormSelected={setFormSelected}\n                        filters={filters}\n                        setFilters={setFilters} />\n                </Card.Body>\n            </Card>\n        </div >\n    )\n\n\n}\n\n\n\n\nexport default FormManagementComponent","// Copyright (C) 2022 Léo Gorman\n// \n// This file is part of rhomis-data-app.\n// \n// rhomis-data-app is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// rhomis-data-app is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with rhomis-data-app.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState, useEffect, useContext } from 'react'\nimport { Form, Button, Card, Table } from 'react-bootstrap'\nimport axios from 'axios'\nimport AuthContext from '../authentication-component/AuthContext'\nimport '../project-management-component/project-management-component.css'\nimport '../../App.css'\n\n\nimport { useHistory } from 'react-router'\nimport { useParams } from 'react-router-dom'\n\nimport { FetchUserInformation, GetFormInformation, GetInformationForFormComponent} from '../fetching-context-info/fetching-context-info'\n\n\nimport { AiOutlineArrowLeft } from 'react-icons/ai'\n\nimport QRCode from 'react-qr-code'\nimport { deflateSync } from 'zlib'\nimport UserContext from '../user-info-component/UserContext'\n\n// Rendering a table based on JSON data from a query\n// This could include individual household entries\n// or could include things like units\nfunction renderTable(data) {\n    // console.log(data)\n\n\n    if (data !== null) {\n        var full_data_set = data.slice(0, 9)\n        var column_names = []\n\n        // Looping through households\n        for (let household_index = 0; household_index < full_data_set.length; household_index++) {\n            // All of the column names for this individual household\n            var household_column_names = Object.keys(full_data_set[household_index])\n            //Looping through individual column names for the individual household\n            for (let column_index = 0; column_index < household_column_names.length; column_index++) {\n                // The new column name for that household\n                var new_column = household_column_names[column_index]\n\n                if (!column_names.some(column => column === new_column)) {\n\n                    if (household_index === 0) {\n                        column_names.splice(column_index, 0, new_column)\n                    }\n\n                    if (household_index > 0) {\n\n                        // Check if the previous column was in the column index\n                        if (!household_column_names[column_index - 1] !== undefined) {\n                            var index_of_previous_column_name = column_names.indexOf(household_column_names[column_index - 1])\n                            column_names.splice(index_of_previous_column_name + 1, 0, new_column)\n\n                        } else {\n                            column_names.splice(column_index + 1, 0, new_column)\n                        }\n                    }\n                }\n\n            }\n        }\n        return (\n            <>\n                <Table striped hover size=\"sm\" responsive>\n                    {/* Table header */}\n                    <thead>\n                        <tr key=\"row_1\">\n                            {column_names.map((column, column_key) => {\n                                return (<th className=\"col-md-1\" key={\"row_1_column_\" + column_key}>{column}</th>)\n                            })}\n                        </tr>\n                    </thead>\n                    {/* Table Body */}\n                    <tbody>\n                        {full_data_set.map((household, household_key) => {\n                            return (<tr key={\"row_\" + household_key}>\n                                {column_names.map((column, column_key) => {\n                                    return (<td height=\"10px\" key={\"row_\" + household_key + \"column_\" + column_key + \"_\" + \"household_\" + household_key}>{household[column] ? household[column] : \"NA\"}</td>)\n                                })}\n                            </tr>)\n                        })}\n\n                    </tbody>\n                </Table>\n            </ >)\n    }\n}\n\nfunction generateCSV(data) {\n    //Return nothing if the data is null\n    if (data === null) {\n        return;\n    }\n\n    if (data.length === undefined) {\n        return;\n    }\n\n    // Creating an empty list to include all of the lines of the csv\n    var csv_lines = []\n\n    // This is the full RHoMIS Data set\n    var full_data_set = data\n\n    // Identifying the column headers\n    // Some households have more columns than other. This merges column\n    // names in order based on the rows of each household\n    var column_names = []\n\n    // Looping through households\n    for (let household_index = 0; household_index < full_data_set.length; household_index++) {\n        // All of the column names for this individual household\n        var household_column_names = Object.keys(full_data_set[household_index])\n        //Looping through individual column names for the individual household\n        for (let column_index = 0; column_index < household_column_names.length; column_index++) {\n            // The new column name for that household\n            var new_column = household_column_names[column_index]\n            // Checking whether the new column has previously been encountered \n            if (!column_names.some(column => column === new_column)) {\n                // If this is the first househould, adds the new element at the column index\n                // not deleting any items\n                if (household_index === 0) {\n                    column_names.splice(column_index, 0, new_column)\n                }\n                // Checks if this is a household after the first household\n                if (household_index > 0) {\n                    // Check if the previous column was in the column index\n                    if (!household_column_names[column_index - 1] !== undefined) {\n                        // Looks at the column before, if it was encountered previously\n                        // we make sure this new column is added in the correct place\n                        var index_of_previous_column_name = column_names.indexOf(household_column_names[column_index - 1])\n\n                        column_names.splice(index_of_previous_column_name + 1, 0, new_column)\n\n                    } else {\n                        // If the previous column did not exist previously, we make sure to add the new column\n                        // at the end.\n                        column_names.splice(column_index + 1, 0, new_column)\n                    }\n                }\n            }\n\n\n        }\n    }\n    // add all of the column names, seperated by a column and a space\n    csv_lines.push(column_names.join(\", \"))\n\n    // Now push each individual household to the csv\n    var household_data = full_data_set.map((household) => {\n        var household_array = column_names.map((column) => {\n            if (household[column] !== null) {\n                return household[column]\n            } else {\n                return ''\n            }\n\n        })\n        // Join the column values by comma\n        var household_row = household_array.join(\", \")\n        return (household_row)\n\n    })\n    csv_lines = csv_lines.concat(household_data)\n\n    // Join each line and seperate by \\n\n    var csv_string = csv_lines.join('\\n')\n    return (csv_string)\n}\n\nasync function FetchData(props) {\n    // Basic post request, fetching information by: \n    //dataType: type of data we are looking for (e.g. indicator data),\n    console.log(\"Fetching unit data\")\n    console.log(props)\n\n    const response = await axios({\n        method: \"post\",\n        url: process.env.REACT_APP_API_URL + \"api/data\",\n        data: {\n            dataType: props.dataType,\n            projectID: props.projectID,\n            formID: props.formID,\n            unit: props.unit,\n            data: props.data\n        },\n        headers: {\n            'Authorization': props.authToken\n        }\n    })\n\n    // If the response is null return null\n    // Otherwise return the dataset.\n    var data = response.data\n    if (data === null) {\n        return null\n    } else {\n        return (data)\n    }\n}\n// Generating a link to download the csv data\nfunction generateDataDownloadLink(dataToDownload, dataDownloadLink) {\n    // Generating the csv string from the data we\n    // hope to download (comes in JSON format)\n    const dataCSV = generateCSV(dataToDownload)\n    // Create a file-like immutable objesct\n    const data = new Blob([dataCSV], { type: 'text/plain' })\n\n    // Clears the previous URL used to download the data\n    if (dataDownloadLink !== '') {\n        window.URL.revokeObjectURL(dataDownloadLink)\n    }\n    // update the download link state\n    return (window.URL.createObjectURL(data))\n}\n\nasync function ProcessData(props) {\n    const form = props.data.forms.filter((item) => item.name === props.formSelected && item.project === props.projectSelected)[0]\n    const result = await axios({\n        method: 'post',\n        url: process.env.REACT_APP_API_URL + \"api/process-data\",\n        headers: {\n            'Authorization': props.authToken\n        },\n        data: {\n            commandType: props.commandType,\n            projectName: props.projectSelected,\n            formName: props.formSelected,\n            formVersion: form.formVersion,\n            draft: props.draft,\n        }\n    })\n    return (result)\n}\n\nasync function AddFormUser(props) {\n    let url = \"\"\n    if (props.userType === \"dataCollector\") {\n        url = process.env.REACT_APP_AUTHENTICATOR_URL + \"api/user/data-collector\"\n    }\n\n    if (props.userType === \"analyst\") {\n        url = process.env.REACT_APP_AUTHENTICATOR_URL + \"api/user/analyst\"\n    }\n\n    try {\n        const result = await axios({\n            method: 'post',\n            url: url,\n            headers: {\n                'Authorization': props.authToken\n            },\n            data: {\n                formName: props.formName,\n                email: props.email\n            }\n        })\n        console.log(result)\n        return (result)\n\n    } catch (err) {\n        return (err)\n\n    }\n\n}\n\nfunction UserForm(props) {\n\n    const [userType, setUserType] = useState('')\n    const [email, setEmail] = useState('')\n\n    return (\n        <>\n            <Form>\n                <Form.Group>\n                    <Form.Label>User email</Form.Label>\n                    <Form.Control onChange={(event) => {\n                        setEmail(event.target.value)\n                        console.log(event.target.value)\n                    }}></Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>User Role</Form.Label>\n                    <Form.Select aria-label=\"Default select example\" defaultValue=\"Open this select menu\"\n                        onChange={(event) => {\n                            setUserType(event.target.value)\n\n                            console.log(event.target.value)\n                        }}>\n                        <option disabled={true}>Open this select menu</option>\n                        <option value=\"dataCollector\">Data Collector: Can access training materials and configure enumerator devices</option>\n                        <option value=\"analyst\">Data Analyst: Can download processed data</option>\n                    </Form.Select>\n                </Form.Group>\n\n                <Button className=\"bg-dark text-white border-0 float-right\" style={{ \"marginTop\": \"10px\" }}\n                    onClick={async () => {\n                        console.log(email)\n                        const result = await AddFormUser({\n                            authToken: props.authToken,\n                            email: email,\n                            formName: props.formSelected,\n                            userType: userType\n                        })\n                        console.log(result)\n                    }}>Add User</Button>\n\n            </Form >\n        </>\n    )\n\n}\n\n\n\n\nfunction SetInitialFormState(props) {\n\n    console.log(\"Initial form state props\")\n    console.log(props)\n\n    function CheckFormCode(props) {\n        if (!props.data) {\n            return false\n        }\n        if (!props.data.forms) {\n            return false\n        }\n        let form = props.data.forms.filter((item) => item.name === props.formSelected & item.project === props.projectSelected)\n        if (form.length === 1) {\n            return true\n        }\n        return (false)\n    }\n\n    function CheckUnitsForm(props) {\n\n        if (!props.formData) {\n            return false\n        }\n        if (!props.formData.units) {\n            return false\n        }\n        if (props.formData.units.length > 0) {\n            console.log(\"Number of forms\")\n            console.log(props.formData.units.length)\n            return (true)\n        }\n\n        return false\n    }\n\n\n\n    function CheckDataForm(props) {\n\n        // Checking if their is data for this form\n        // If so the render the data form\n        if (props.formData) {\n            if (props.formData.dataSets.length > 0) {\n                return (true)\n            }\n        }\n        return (false)\n    }\n\n    function CheckProjectManager(props) {\n        console.log(\"Project manager props\")\n        console.log(props)\n\n        if (!props.data) {\n            return false\n        }\n        if (!props.data.user) {\n            return false\n        }\n\n        if (!props.data.user.roles) {\n            return false\n        }\n\n        if (!props.data.user.roles.projectManager) {\n            return false\n        }\n\n        if (props.data.user.roles.projectManager.includes(props.projectSelected)) {\n            return true\n        }\n\n\n        return false\n\n    }\n\n    function CheckDataAnalyst(props) {\n\n        if (!props.data) {\n            return false\n        }\n        if (!props.data.user) {\n            return false\n        }\n\n        if (!props.data.user.roles) {\n            return false\n        }\n\n        if (!props.data.user.roles.dataCollector) {\n            return false\n        }\n\n        if (props.data.user.roles.dataCollector.includes(props.formSelected)) {\n            return true\n        }\n        return false\n    }\n\n    function CheckODKConf(props) {\n        console.log(\"odk conf args\")\n        console.log(props)\n        if (!props.data) {\n            return false\n        }\n\n        if (!props.data.forms) {\n            return false\n        }\n        let form = props.data.forms.filter((item) => item.name === props.formSelected && item.project === props.projectSelected)\n        if (form.length !== 1) {\n            return false\n        }\n\n        if (form[0].draft === true) {\n            return form[0].draftCollectionDetails\n\n        }\n        if (form[0].draft === false) {\n            return form[0].collectionDetails\n        }\n\n\n        return false\n    }\n\n    function CheckEncodedSettings(props) {\n\n        if (!props.data) {\n            return false\n        }\n\n        if (!props.data.forms) {\n            return false\n        }\n        let form = props.data.forms.filter((item) => item.name === props.formSelected && item.project === props.projectSelected)\n\n        if (form.length !== 1) {\n            return false\n        }\n\n        if (form[0].draft === true) {\n            let odkConf = form[0].draftCollectionDetails\n            return deflateSync(JSON.stringify(odkConf)).toString('base64')\n\n        }\n        if (form[0].draft === false) {\n            let odkConf = form[0].collectionDetails\n            return deflateSync(JSON.stringify(odkConf)).toString('base64')\n        }\n\n\n        return false\n\n    }\n\n    function CheckDraft(props) {\n\n        if (!props.data) {\n            return false\n        }\n\n        if (!props.data.forms) {\n            return false\n        }\n        let form = props.data.forms.filter((item) => item.name === props.formSelected && item.project === props.projectSelected)\n\n        if (form.length !== 1) {\n            return false\n        }\n\n        if (form[0].draft === true) {\n            return true\n\n        }\n        if (form[0].draft === false) {\n            return false\n        }\n        return false\n\n    }\n\n    // Check if a code for the form should be rendered\n\n    const renderODKFormCode = CheckFormCode({\n        data: props.data,\n        formSelected: props.formSelected,\n        projectSelected: props.projectSelected\n    })\n    const renderUnitsForm = CheckUnitsForm({\n        formData: props.formData\n    })\n\n    const renderDataForm = CheckDataForm({ formData: props.formData })\n\n    const projectManagerOfForm = CheckProjectManager({\n        data: props.data,\n        projectSelected: props.projectSelected\n    })\n    const dataAnalystOfForm = CheckDataAnalyst({\n        data: props.data,\n        formSelected: props.formSelected\n    })\n\n    const odkConf = CheckODKConf({\n        data: props.data,\n        projectSelected: props.projectSelected,\n        formSelected: props.formSelected\n    })\n\n    const encoded_settings = CheckEncodedSettings({\n        data: props.data,\n        projectSelected: props.projectSelected,\n        formSelected: props.formSelected\n    })\n\n    const draft = CheckDraft({\n        data: props.data,\n        projectSelected: props.projectSelected,\n        formSelected: props.formSelected\n    })\n\n    const stateToReturn = {\n        renderODKFormCode: renderODKFormCode,\n        renderUnitsForm: renderUnitsForm,\n        renderDataForm: renderDataForm,\n        projectManagerOfForm: projectManagerOfForm,\n        dataAnalystOfForm: dataAnalystOfForm,\n        odkConf: odkConf,\n        encoded_settings: encoded_settings,\n        draft: draft\n    }\n    return stateToReturn\n}\n\n\nfunction RenderFormAdmin(props) {\n\n    // const [formAdminState, setFormAdminState] = useState()\n\n    const [renderInstallCode, setRenderInstallCode] = useState(false)\n    const [renderODKFormCode, setRenderODKFormCode] = useState(true)\n\n    const [unitsSelect, setUnitsSelect] = useState(null)\n    const [rhomisDataSelect, setRHoMISSelect] = useState(null)\n\n    const [unitsData, setUnitsData] = useState(null)\n    const [rhomisData, setRHoMISData] = useState(null)\n\n    const [unitsDownloadLink, setUnitsDownloadLink] = useState('')\n    const [dataDownloadLink, setDataDownloadLink] = useState('')\n\n\n\n    // Checking what data is available when component loads\n\n\n\n    // Return nothing if there is no administrative data\n    if (!props.data) {\n        return (<></>)\n    }\n\n\n    console.log(\"form props\")\n\n    console.log(props)\n\n    return (\n        <>\n\n            <Card className=\"project-management-card\">\n                <Card.Header>Collect Data</Card.Header>\n                <Card.Body>\n                    <p>\n                        To start collecting data and submitting completed surveys you will need\n                        to make sure you have installed the ODK Collect App on your android device.\n                        To install ODK collect, scan <a href=\"#\" onClick={(e) => {\n                            e.preventDefault()\n                            setRenderInstallCode(!renderInstallCode)\n                        }} className=\"qr-code-link\">this QR code</a> or\n                        search for ODK collect on the Google Play Store.\n                    </p>\n                    {renderInstallCode ?\n                        <>\n                            <div className=\"qr-code-container\">\n\n                                <QRCode value={\"https://play.google.com/store/apps/details?id=org.odk.collect.android&hl=en_GB&gl=US\"} />\n\n                            </div>\n                            <div className=\"qr-code-container\">\n                                <Button className=\"bg-dark border-0\" onClick={() => {\n                                    setRenderInstallCode(false)\n                                }}>Hide Code</Button>\n                            </div>\n                        </>\n                        : <></>}\n\n                    <p>\n                        Once you have installed ODK collect, you will need to configure the app to\n                        access RHoMIS forms. Open the app. If this is your first time using ODK\n                        there will be an option to \"Configure with QR code\". Use <a href=\"#\" onClick={(e) => {\n                            e.preventDefault()\n                            setRenderODKFormCode(!renderODKFormCode)\n\n                        }} className=\"qr-code-link\">this QR code</a>. If you have used the App\n                        before, you will need to add this form.\n                    </p>\n                    {renderODKFormCode ?\n                        <>\n                            <div className=\"qr-code-container\">\n\n                                <QRCode value={props.formState.encoded_settings} />\n\n                            </div>\n                            <div className=\"qr-code-container\">\n                                <Button className=\"bg-dark border-0\" onClick={() => {\n                                    setRenderODKFormCode(false)\n                                }}>Hide Code</Button>\n                            </div>\n                        </>\n                        : <></>}\n                    {props.formState.draft ? <h4>***Your form is currently saved as a draft. Any submissions you make\n                        will be removed once the form is finalised*** </h4> : <></>}\n\n                    {props.formState.draft ?\n                        <>\n                            As this is a draft form. You might like to quickly see what the data you collect might look like. Click the button below to generate some mock data. Please note,\n                            that values are randomly generated.\n                            < br />\n                            <Button className=\"bg-dark border-0\" style={{ \"margin\": \"10px\" }}\n                                onClick={async () => {\n                                    await ProcessData({\n                                        commandType: \"generate\",\n                                        draft: props.formState.draft,\n                                        authToken: props.authToken,\n                                        data: props.data,\n                                        formSelected: props.formSelected,\n                                        projectSelected: props.projectSelected\n                                    })\n                                    console.log(\"gen data\")\n                                }}\n\n                            >Generate Data</Button> </> : <></>}\n\n                </Card.Body>\n            </Card>\n\n\n\n            {props.formState.dataAnalystOfForm | props.formState.projectManagerOfForm ?\n                < Card className=\"project-management-card\">\n                    <Card.Header>Processing Data</Card.Header>\n                    <Card.Body>\n\n                        During data-collection, enumerators have the opportunity\n                        to input new units. We need to know the numeric conversions\n                        for these units in order calculate key indicators (e.g. crop yield). <br />\n\n\n                        <Button className=\"bg-dark border-0\" style={{ \"margin\": \"10px\" }}\n                            onClick={async () => {\n                                await ProcessData({\n                                    commandType: \"units\",\n                                    draft: props.formState.draft,\n                                    authToken: props.authToken,\n                                    data: props.data,\n                                    formSelected: props.formSelected,\n                                    projectSelected: props.projectSelected\n                                })\n                                console.log(\"gen data\")\n                            }}\n                        >\n                            Extract Units\n                        </Button>\n\n                        <br />\n                        Once you have converted your units, the data-set can be processed\n                        to calculate key information <br />\n                        <Button className=\"bg-dark border-0\" style={{ \"margin\": \"10px\" }}\n                            onClick={async () => {\n                                await ProcessData({\n                                    commandType: \"process\",\n                                    draft: props.formState.draft,\n                                    authToken: props.authToken,\n                                    data: props.data,\n                                    formSelected: props.formSelected,\n                                    projectSelected: props.projectSelected\n                                })\n                                console.log(\"gen data\")\n                            }}\n                        >\n                            Process Data\n                        </Button>\n\n                    </Card.Body>\n                </Card> : <></>\n            }\n\n            {props.formState.renderUnitsForm ? <Card className=\"project-management-card\">\n                <Card.Header>Download Units</Card.Header>\n                <Card.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>Select the Type of Unit</Form.Label>\n\n                            <Form.Select defaultValue=\"Select\"\n                                onChange={async (event) => {\n                                    setUnitsSelect(event.target.value)\n                                    const newUnitsData = await FetchData({\n                                        authToken: props.authToken,\n                                        dataType: event.target.value,\n                                        projectID: props.projectSelected,\n                                        formID: props.formSelected,\n                                        unit: true,\n                                        data: false\n                                    })\n                                    const units_download_link = generateDataDownloadLink(newUnitsData, unitsDownloadLink)\n                                    setUnitsDownloadLink(units_download_link)\n\n                                    setUnitsData(newUnitsData)\n\n\n\n                                    console.log(\"units data\")\n                                    console.log(newUnitsData)\n\n\n\n                                }}>\n                                <option key=\"default-select\" disabled={true}>Select</option>\n                                {props.formData.units.map((unitType) => {\n                                    return <option key={\"unit-option-\" + unitType}>{unitType}</option>\n                                })}\n                            </Form.Select>\n                        </Form.Group>\n\n                    </Form>\n                    {unitsData ? <>\n                        <br />\n                        {renderTable(unitsData)}\n                        <a\n                            // Name of the file to download\n                            download={props.projectSelected + '_' + props.formSelected + '_' + unitsSelect + '.csv'}\n                            // link to the download URL\n                            href={unitsDownloadLink}\n                        >\n\n                            <Button className=\"bg-dark border-0\">Download Data</Button></a>\n                    </>\n                        : <></>}\n\n\n\n\n                    {/* {JSON.stringify(formData.units)} */}\n                </Card.Body>\n            </Card > : <></>\n            }\n\n            {\n                props.formState.renderDataForm ? <Card className=\"project-management-card\">\n                    <Card.Header>Download Data</Card.Header>\n                    <Card.Body>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label>Select the type of data</Form.Label>\n                                <Form.Select defaultValue=\"Select\"\n                                    onChange={async (event) => {\n                                        setRHoMISSelect(event.target.value)\n                                        const newRHoMISData = await FetchData({\n                                            authToken: props.authToken,\n                                            dataType: event.target.value,\n                                            projectID: props.projectSelected,\n                                            formID: props.formSelected,\n                                            unit: false,\n                                            data: true\n                                        })\n                                        const rhomis_download_link = generateDataDownloadLink(newRHoMISData, dataDownloadLink)\n                                        setDataDownloadLink(rhomis_download_link)\n                                        setRHoMISData(newRHoMISData)\n                                        console.log(\"rhomis data\")\n                                        console.log(newRHoMISData)\n                                    }}>\n                                    <option key=\"default-select\" disabled={true}>Select</option>\n                                    {props.formData.dataSets.map((dataSet) => {\n                                        return <option key={\"data-option-\" + dataSet}>{dataSet}</option>\n                                    })}\n                                </Form.Select>\n                            </Form.Group>\n\n                        </Form>\n\n                        {rhomisData ? <>\n                            <br />\n                            {renderTable(rhomisData)}\n                            <a\n                                // Name of the file to download\n                                download={props.projectSelected + '_' + props.formSelected + '_' + rhomisDataSelect + '.csv'}\n                                // link to the download URL\n                                href={dataDownloadLink}\n                            >\n                                <Button className=\"bg-dark border-0\">Download Data</Button></a>\n                        </>\n                            : <></>}\n                    </Card.Body>\n                </Card> :\n                    <></>\n            }\n            {\n                props.formState.projectManagerOfForm ? <Card className=\"project-management-card\">\n                    <Card.Header as=\"h5\">Manage Users</Card.Header>\n                    <Card.Body>\n                        {/* <UserTables /> */}\n                        <UserForm authToken={props.authToken}\n                            formSelected={props.formSelected}\n                            projectSelected={props.projectSelected} />\n                    </Card.Body>\n                </Card> :\n                    <></>\n            }\n        </>\n    )\n}\n\nexport default function FormAdminComponent() {\n\n    const history = useHistory()\n    const projectSelected = useParams().projectName\n    const formSelected = useParams().formName\n\n\n    const [authToken, setAuthToken] = useContext(AuthContext)\n    const [adminData, setAdminData] = useContext(UserContext)\n\n    const [formData, setFormData] = useState()\n\n    const [initialState, setInitialState] = useState({\n        renderODKFormCode: false,\n        renderUnitsForm: false,\n        renderDataForm: false,\n        projectManagerOfForm: false,\n        dataAnalystOfForm: false,\n        odkConf: false,\n        encoded_settings: false,\n        draft: false\n    })\n\n\n    useEffect(() => {\n\n\n\n\n        async function GetUserInfo() {\n            await GetInformationForFormComponent({\n                setAuthToken:setAuthToken,\n                authToken: authToken,\n                setUserInfo: setAdminData\n\n            })\n            // const response = await FetchUserInformation({\n            //     authToken: authToken,\n            //     setUserInfo: setAdminData\n            // })\n\n\n        }\n\n        GetUserInfo()\n    }, [])\n\n\n    useEffect(() => {\n        console.log(\"form data changed\")\n        const new_form_state = SetInitialFormState({\n            data: adminData,\n            formData: formData,\n            formSelected: formSelected,\n            projectSelected: projectSelected\n        })\n        console.log(\"New form admin state\")\n        console.log(new_form_state)\n\n        setInitialState(new_form_state)\n\n\n    }, [formData, adminData, formSelected, projectSelected])\n\n    return (\n        <div id=\"project-management-container\" className=\"sub-page-container\">\n\n            <Card className=\"main-card border-0\">\n                <Card.Header className=\" bg-dark text-white\">\n                    <div className=\"main-card-header-container\">\n                        <h3>Form Overview</h3>\n                        <div style={{ \"display\": \"flex\", \"flex-direction\": \"row\", \"margin-left\": \"auto\" }} >\n                            <div className=\"main-card-header-item\">{projectSelected}</div>\n                            <div className=\"main-card-header-item\">{formSelected}</div>\n\n                            <Button className=\"bg-dark border-0\" onClick={() => {\n                                history.push(\"/projects/\" + projectSelected)\n\n                            }}>\n                                <AiOutlineArrowLeft size={25} />\n                            </Button>\n                        </div>\n                    </div>\n                </Card.Header>\n                <Card.Body className=\"main-card-body\">\n                    <RenderFormAdmin\n                        authToken={authToken}\n                        setAdminData={setAdminData}\n                        data={adminData}\n                        formSelected={formSelected}\n                        projectSelected={projectSelected}\n                        formData={formData}\n                        setFormData={setFormData}\n                        formState={initialState}\n                        setFormState={setInitialState} />\n                </Card.Body>\n            </Card>\n        </div >\n    )\n}","import React, { useContext, useState, useEffect } from 'react'\nimport { Container, Navbar, Nav, Offcanvas, Button } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport AuthContext from '../authentication-component/AuthContext';\nimport { MdOutlineMenu } from 'react-icons/md'\n\nimport axios from 'axios';\n\nimport './navigation-bar-component.css'\n/* \nSetting up a standard react navbar to navigation component. Please\nnote that if you want to maintain state or context between routes,\nyou must use the 'react-router-dom' \"link\". I have integrated\nthis with the Nav.Link component \n*/\n\n\nasync function GetAdminData(props) {\n    console.log(\"authToken: \", props.authToken)\n    const result = await axios({\n        method: 'get',\n        url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/meta-data\",\n        headers: {\n            'Authorization': props.authToken\n        }\n    })\n\n    console.log(\"response: \")\n    console.log(result)\n    if (result.status === 200) {\n        console.log(\"Setting project information\")\n        if (result.data.projects.length > 0) {\n            props.setShowProjectManagement(true)\n        }\n        if (result.data.user.roles.administrator === true) {\n            props.setShowAdmin(true)\n        }\n        if (result.data.user.roles.dataCollector.length > 0) {\n            props.setShowCollectData(true)\n        }\n    }\n    if (result.status === 400) {\n        alert(result.data)\n    }\n}\n\n\n\n\n\nexport default function MainNavbar(props) {\n    console.log(\"Survey builder url: \" + process.env.SURVEY_BUILDER_URL)\n    // props.Logout()\n    const [authToken, setAuthToken] = useContext(AuthContext)\n    const [show, setShow] = useState(false)\n\n    const handleClose = () => setShow(false);\n    const handleShow = async () => setShow(true);\n    const [showAdmin, setShowAdmin] = useState(false)\n    const [showCollectData, setShowCollectData] = useState(false)\n    const [showProjectManagement, setShowProjectManagement] = useState(false)\n\n    useEffect(async () => {\n        await GetAdminData({\n            authToken: authToken,\n            setShowAdmin: setShowAdmin,\n            setShowCollectData: setShowCollectData,\n            setShowProjectManagement: setShowProjectManagement,\n        })\n\n    }, [])\n\n\n\n\n    return (\n        <>\n            <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\" expand=\"false\">\n                {/* <Container fluid> */}\n\n                <div className=\"menu-button\" onClick={handleShow}><MdOutlineMenu className=\"menu-button-icon\" size={30} /></div>\n                <h2 style={{ \"color\": \"white\" }}>RHoMIS</h2>\n                <Nav.Link className=\"logout-button\" as={Link} to=\"/login\" onClick={() => {\n                    setAuthToken(null)\n                    localStorage.clear()\n                }} >Logout</Nav.Link>\n\n\n\n                <Offcanvas\n                    backdrop=\"true\"\n                    style={{ \"background-color\": \"#212529\", \"width\": \"25%\" }}\n                    id=\"offcanvasNavbar\"\n                    aria-labelledby=\"offcanvasNavbarLabel\"\n                    placement=\"start\"\n                    show={show}\n                    onHide={handleClose}\n\n                >\n\n                    <Offcanvas.Header closeVariant=\"white\" closeButton style={{ \"color\": \"white\", \"background-color\": \"#212529\" }}>\n                        <Offcanvas.Title id=\"offcanvasNavbarLabel\"><h2 style={{ \"padding-left\": \"20px\" }}>Dashboard</h2></Offcanvas.Title>\n                    </Offcanvas.Header>\n                    <div className=\"side-bar-container\">\n\n                        <div className=\"side-bar-item\">\n                            <Nav.Link className=\"side-bar-link\" as={Link} onClick={() => { handleClose() }} to=\"/\">Portal</Nav.Link>\n                        </div>\n                        <div className=\"side-bar-item\">\n                            <form style={{ \"width\": \"100%\" }} method=\"post\" action={\"https://rhomis-survey.stats4sdtest.online/login\"} class=\"inline\">\n                                <input type=\"hidden\" name=\"token\" value={authToken} />\n                                <input type=\"hidden\" name=\"redirect_url\" value=\"/admin/xlsform/create\" />\n                                <input className=\"form-link\" type=\"submit\" value=\"Design a Survey\"\n                                />\n                            </form>\n                        </div>\n\n                        {showProjectManagement ? <div className=\"side-bar-item\">\n                            <Nav.Link className=\"side-bar-link\" as={Link} onClick={() => { handleClose() }} to=\"/projects\">Manage Projects</Nav.Link>\n                        </div> : <></>}\n\n                        {showCollectData ? <div className=\"side-bar-item\">\n                            <Nav.Link className=\"side-bar-link\" as={Link} onClick={() => { handleClose() }} to=\"/projects\">Collect Data</Nav.Link>\n                        </div> : <></>}\n\n\n                        {/* <div className=\"side-bar-item\">\n                            <Nav.Link className=\"side-bar-link\" onClick={() => { handleClose() }} href=\"https://rhomis-survey.stats4sdtest.online/login\">Design a Survey</Nav.Link>\n                        </div> */}\n                        {/* <div className=\"side-bar-item\">\n                            <Nav.Link className=\"side-bar-link\" as={Link} onClick={() => { handleClose() }} to=\"/data-collection\">Collect Data</Nav.Link>\n                        </div> */}\n                        {/* <div className=\"side-bar-item\">\n                            <Nav.Link className=\"side-bar-link\" as={Link} onClick={() => { handleClose() }} to=\"/global-data\">Global Data</Nav.Link>\n                        </div> */}\n                        {/* <div className=\"side-bar-item\">\n                            <Nav.Link className=\"side-bar-link\" as={Link} onClick={() => { handleClose() }} to=\"/data-querying\">Data Query</Nav.Link>\n                        </div> */}\n                        {showAdmin ? <div className=\"side-bar-item\">\n                            <Nav.Link className=\"side-bar-link\" as={Link} onClick={() => {\n                                handleClose()\n\n                            }} to=\"/administration\">Administration</Nav.Link>\n                        </div> : <></>}\n                        <div className=\"side-bar-item\">\n                            <Nav.Link className=\"side-bar-link\" as={Link} to=\"/login\" onClick={() => {\n                                setAuthToken(null)\n                                localStorage.clear()\n                            }} >Logout</Nav.Link>\n                        </div>\n                    </div>\n\n                </Offcanvas>\n\n            </Navbar >\n\n\n\n\n        </>\n\n    )\n}\n\n","// Copyright (C) 2022 Léo Gorman\n// \n// This file is part of rhomis-data-app.\n// \n// rhomis-data-app is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// rhomis-data-app is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with rhomis-data-app.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState, useEffect, useContext } from 'react'\nimport { Card, Form, Accordion, Button, Table, Row, Col } from 'react-bootstrap'\n\nimport './form-creation-component.css'\nimport '../../App.css'\n\nimport axios from 'axios'\n\nimport AuthContext from '../authentication-component/AuthContext'\n\nasync function GetProjectInformation(props) {\n    console.log(\"authToken: \", props.authToken)\n    const result = await axios({\n        method: 'get',\n        url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/meta-data\",\n        headers: {\n            'Authorization': props.authToken\n        }\n    })\n\n    console.log(\"response: \")\n    console.log(result)\n    if (result.status === 200) {\n        console.log(\"Setting project information\")\n        console.log(result.data)\n        props.setProjectInformation(result.data)\n\n    }\n    if (result.status === 400) {\n        alert(result.data)\n    }\n}\n\nasync function CreateProject(authToken, projectName, projectDescription) {\n    console.log(projectName)\n    console.log(authToken)\n\n    // Create project\n    const projectCreationResponse = await axios({\n        method: \"post\",\n        url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/projects/create\",\n        data: {\n            name: projectName,\n            description: projectDescription\n        },\n        headers: {\n            'Authorization': authToken\n        }\n    })\n\n    return (projectCreationResponse)\n}\n\nasync function DeleteProject(authToken, projectName) {\n    console.log(projectName)\n    console.log(authToken)\n\n    // Create project\n    const projectCreationResponse = await axios({\n        method: \"delete\",\n        url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/projects/delete\",\n        data: {\n            name: projectName\n        },\n        headers: {\n            'Authorization': authToken\n        }\n    })\n\n    return (projectCreationResponse)\n}\n\n\nasync function CreateForm(authToken, projectName, formName, formVersion, formFile) {\n    console.log(projectName)\n    console.log(process.env.REACT_APP_AUTHENTICATOR_URL + 'api/forms/new?form_name=' + formName + '&form_version=' + formVersion + '&project_name=' + projectName + '&publish=false')\n\n\n    // Create form\n    const formCreationResponse = await axios({\n        method: \"post\",\n        url: process.env.REACT_APP_AUTHENTICATOR_URL + 'api/forms/new?form_name=' + formName + '&form_version=' + formVersion + '&project_name=' + projectName + '&publish=false',\n        data: formFile,\n        headers: {\n            'Authorization': authToken,\n            'Content-Type': \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        }\n    })\n    return (formCreationResponse)\n\n\n\n\n}\n\nasync function UpdateForm(authToken, projectName, formName, formVersion, formFile) {\n\n\n    // Create form\n    const formCreationResponse = await axios({\n        method: \"post\",\n        url: process.env.REACT_APP_AUTHENTICATOR_URL + 'api/forms/new-draft?form_name=' + formName + '&form_version=' + formVersion + '&project_name=' + projectName + '&publish=false',\n        data: formFile,\n        headers: {\n            'Authorization': authToken,\n            'Content-Type': \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        }\n    })\n    return (formCreationResponse)\n}\n\n\n\nfunction CreateProjectForm(props) {\n    return (\n        <>\n            <Form>\n                <Form.Group>\n                    <Form.Label>Project Name</Form.Label>\n                    <Form.Control type=\"text\" onChange={(event) => {\n                        props.setNewProjectName(event.target.value)\n                    }} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Project Description</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} onChange={(event) => {\n                        props.setNewProjectDescription(event.target.value)\n                    }} />\n                </Form.Group>\n\n            </Form>\n            <Button style={{ \"text-align\": \"right\" }} onClick={async () => {\n                await CreateProject(props.authToken, props.newProjectName, props.newProjectDescription)\n                await props.GetProjectInformation({ authToken: props.authToken, setProjectInformation: props.setProjectInformation })\n\n\n            }}>Add project</Button>\n        </>\n    )\n}\n\nfunction NewFormEntry(props) {\n\n    console.log(props.data)\n    let projectList = [\"No Projects\"]\n    let disabled = true\n\n    if (props.data !== undefined & props.data !== null) {\n        if (props.data.projects !== undefined) {\n            projectList = props.data.projects.map((project) => {\n                return project.name\n            })\n            disabled = false\n        }\n\n        if (props.data.projects.length === 0) {\n            projectList = [\"No Projects\"]\n            disabled = true\n\n        }\n    }\n    console.log(projectList)\n\n    return (\n        <>\n            <Form>\n                <Form.Group>\n                    <Form.Label>\n                        Select a Project\n                    </Form.Label>\n                    <Form.Select defaultValue=\"Select a Project\" onChange={(event) => { props.setSelectedProject(event.target.value) }} disabled={disabled} aria-label=\"Default select example\">\n                        <option disabled={true}>Select a Project</option>\n                        {projectList.map((option) => {\n                            return <option>{option}</option>\n                        })}\n                    </Form.Select>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>\n                        Enter the name of the form\n                    </Form.Label>\n                    <Form.Control onChange={(event) => { props.setNewFormName(event.target.value) }} />\n                    <Form.Text>This must match the \"form_title\" field in your xlsx form settings</Form.Text>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label>\n                        Enter the form version\n                    </Form.Label>\n                    <Form.Control onChange={(event) => { props.setNewFormVersion(event.target.value) }} />\n\n\n                    <Form.Text>This must match the \"version\" field in your xlsx settings tab</Form.Text>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label>\n                        Select your file\n                    </Form.Label>\n                    <Form.Control type=\"file\" size=\"lg\" onChange={(e) => props.setSelectedFile(e.target.files[0])} />\n\n                </Form.Group>\n                <Button onClick={async () => {\n                    await CreateForm(props.authToken, props.selectedProject, props.newFormName, props.newFormVersion, props.selectedFile)\n                    await props.GetProjectInformation({ authToken: props.authToken, setProjectInformation: props.setProjectInformation })\n\n                }}>Submit</Button>\n            </Form>\n        </>\n    )\n}\n\n\nfunction NewDraftFormEntry(props) {\n    console.log(\"Draft form data\")\n\n    const [formList, setFormList] = useState([])\n\n    console.log(props.data)\n    let projectList = [\"No Projects\"]\n    let projectDisabled = true\n\n    if (props.data !== undefined & props.data !== null) {\n        if (props.data.projects !== undefined) {\n            projectList = props.data.projects.map((project) => {\n                return project.name\n            })\n            projectDisabled = false\n        }\n\n        if (props.data.projects.length === 0) {\n            projectList = [\"No Projects\"]\n            projectDisabled = true\n\n        }\n    }\n    console.log(projectList)\n\n    console.log(props.data)\n\n\n    return (\n        <>\n            <Form>\n                <Form.Group>\n                    <Form.Label>\n                        Select the form you would like to update\n                    </Form.Label>\n                    <Form.Select defaultValue=\"Select a Project\" onChange={(event) => {\n\n                        props.setSelectedDraftProject(event.target.value)\n\n                        const newFormList = []\n                        if (props.data !== undefined & props.data !== null) {\n                            if (props.data.forms !== undefined) {\n                                props.data.forms.map((form) => {\n                                    if (form.project === event.target.value) {\n                                        newFormList.push(form.name)\n                                    }\n                                })\n                                setFormList(newFormList)\n                            }\n\n                            if (props.data.projects.length === 0) {\n                                setFormList([])\n                            }\n                        }\n                    }\n                    } disabled={projectDisabled} aria-label=\"Default select example\">\n                        <option disabled={true}>Select a Project</option>\n                        {projectList.map((option) => {\n                            return <option>{option}</option>\n                        })}\n                    </Form.Select>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label>\n                        Select the form you would like to update\n                    </Form.Label>\n                    <Form.Select defaultValue=\"Select a form\" onChange={(event) => {\n                        props.setNewDraftFormName(event.target.value)\n                    }\n                    } aria-label=\"Default select example\">\n                        <option disabled={true}>Select a form</option>\n                        {formList.map((option) => {\n                            return <option>{option}</option>\n                        })}\n                    </Form.Select>\n                </Form.Group>\n\n\n                <Form.Group>\n                    <Form.Label>\n                        Enter the new form version\n                    </Form.Label>\n                    <Form.Control onChange={(event) => { props.setNewDraftFormVersion(event.target.value) }} />\n\n\n                    <Form.Text>This must match the \"version\" field in your xlsx settings tab, please ensure it is different to the previous version</Form.Text>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label>\n                        Select your file\n                    </Form.Label>\n                    <Form.Control type=\"file\" size=\"lg\" onChange={(e) => props.setSelectedDraftFile(e.target.files[0])} />\n\n                </Form.Group>\n                <Button onClick={async () => {\n                    await UpdateForm(props.authToken, props.selectedDraftProject, props.newDraftFormName, props.newDraftFormVersion, props.selectedDraftFile)\n                    await props.GetProjectInformation({ authToken: props.authToken, setProjectInformation: props.setProjectInformation })\n                }}>Submit</Button>\n            </Form>\n        </>\n    )\n}\n\n\nfunction RenderProjectInformation(props) {\n\n    console.log(props)\n    if (!props.data) {\n        return (\n            <div>\n                <Table>\n                    <thead key=\"table-header\">\n                        <tr key=\"table-row-1\">\n                            <th key=\"table-head-item-1\">#</th>\n\n                            <th key=\"table-head-item-2\">Project Name</th>\n                            <th key=\"table-head-item-3\">Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td colSpan={3}>No projects found</td>\n                        </tr>\n\n                    </tbody>\n\n                </Table>\n            </div>\n        )\n    }\n\n\n    if (props.data.projects !== undefined) {\n        return (\n            <div>\n                <Table>\n                    <thead key=\"table-header\">\n                        <tr key=\"table-row-1\">\n                            <th key=\"table-head-item-1\">#</th>\n\n                            <th key=\"table-head-item-2\">Project Name</th>\n                            <th key=\"table-head-item-3\">Description</th>\n                        </tr>\n                    </thead>\n                    <tbody key=\"table-body\">\n                        {props.data.projects.map((project, index) => {\n                            return (\n                                <tr key={\"table-row-\" + index}>\n                                    <td key={\"table-row-\" + index + \"-item-1\"}><Button variant=\"danger\" onClick={async () => {\n                                        await DeleteProject(props.authToken, project.name)\n\n                                    }}>Delete</Button></td>\n\n                                    <td key={\"table-row-\" + index + \"-item-2\"}>{project.name}</td>\n                                    <td key={\"table-row-\" + index + \"-item-3\"}>{project.description}</td>\n                                </tr>\n                            )\n\n                        })}\n\n                    </tbody>\n                </Table>\n            </div>\n\n\n        )\n    }\n\n}\n\n\nasync function AddAdministrator(props) {\n\n    try {\n\n        const result = await axios({\n            url: process.env.REACT_APP_AUTHENTICATOR_URL + \"api/admin\",\n            method: \"post\",\n            headers: {\n                Authorization: props.authToken\n            },\n            data: {\n                email: props.newAdmin\n            }\n        })\n\n        console.log(result)\n\n        return (result.data)\n    } catch (err) {\n\n    }\n\n}\n\nexport default function FormCreationComponent() {\n\n\n\n    const [authToken, setAuthToken] = useContext(AuthContext)\n\n    const [projectInformation, setProjectInformation] = useState(null)\n\n    const [newProjectName, setNewProjectName] = useState(null)\n    const [newProjectDescription, setNewProjectDescription] = useState(null)\n\n    const [selectedProject, setSelectedProject] = useState(null)\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [newFormName, setNewFormName] = useState(null);\n    const [newFormVersion, setNewFormVersion] = useState(null);\n\n\n    const [selectedDraftProject, setSelectedDraftProject] = useState(null);\n    const [selectedDraftFile, setSelectedDraftFile] = useState(null);\n    const [newDraftFormName, setNewDraftFormName] = useState(null);\n    const [newDraftFormVersion, setNewDraftFormVersion] = useState(null);\n\n\n    const [newAdmin, setNewAdmin] = useState(null)\n\n    useEffect(async () => {\n        await GetProjectInformation({ authToken: authToken, setProjectInformation: setProjectInformation })\n    }, [])\n\n\n    return (\n        <div id=\"project-management-container\" className=\"sub-page-container\">\n\n            <Card className=\"main-card border-0\">\n                <Card.Header className=\" bg-dark text-white\"><h3>Creating Forms/Projects</h3></Card.Header>\n                <Card.Body>\n                    <Accordion defaultActiveKey=\"0\">\n                        <Accordion.Item eventKey=\"0\">\n                            <Accordion.Header>Projects</Accordion.Header>\n                            <Accordion.Body>\n                                <RenderProjectInformation\n                                    GetProjectInformation={GetProjectInformation}\n                                    setProjectInformation={setProjectInformation}\n                                    data={projectInformation}\n                                    authToken={authToken} /></Accordion.Body>\n                        </Accordion.Item>\n                        <Accordion.Item eventKey=\"1\">\n                            <Accordion.Header>Create a Project</Accordion.Header>\n                            <Accordion.Body>\n                                <CreateProjectForm\n\n                                    GetProjectInformation={GetProjectInformation}\n                                    setProjectInformation={setProjectInformation}\n                                    newProjectName={newProjectName}\n                                    setNewProjectName={setNewProjectName}\n                                    newProjectDescription={newProjectDescription}\n                                    setNewProjectDescription={setNewProjectDescription}\n                                    authToken={authToken} /></Accordion.Body>\n                        </Accordion.Item>\n                        <Accordion.Item eventKey=\"2\">\n                            <Accordion.Header>Create a Form</Accordion.Header>\n                            <Accordion.Body>\n                                <NewFormEntry\n                                    GetProjectInformation={GetProjectInformation}\n                                    setProjectInformation={setProjectInformation}\n                                    authToken={authToken}\n                                    data={projectInformation}\n                                    selectedFile={selectedFile}\n                                    setSelectedFile={setSelectedFile}\n                                    setNewFormName={setNewFormName}\n                                    newFormName={newFormName}\n                                    setNewFormVersion={setNewFormVersion}\n                                    newFormVersion={newFormVersion}\n                                    setSelectedProject={setSelectedProject}\n                                    selectedProject={selectedProject} />\n                            </Accordion.Body>\n                        </Accordion.Item>\n                        <Accordion.Item eventKey=\"3\">\n                            <Accordion.Header>Update Draft Form</Accordion.Header>\n                            <Accordion.Body>\n                                <NewDraftFormEntry\n                                    GetProjectInformation={GetProjectInformation}\n                                    setProjectInformation={setProjectInformation}\n                                    authToken={authToken}\n                                    data={projectInformation}\n                                    selectedDraftFile={selectedDraftFile}\n                                    setSelectedDraftFile={setSelectedDraftFile}\n                                    setNewDraftFormName={setNewDraftFormName}\n                                    newDraftFormName={newDraftFormName}\n                                    setNewDraftFormVersion={setNewDraftFormVersion}\n                                    newDraftFormVersion={newDraftFormVersion}\n                                    setSelectedDraftProject={setSelectedDraftProject}\n                                    selectedDraftProject={selectedDraftProject} />\n                            </Accordion.Body>\n                        </Accordion.Item>\n\n                        <Accordion.Item eventKey=\"4\">\n                            <Accordion.Header>Add Administrator</Accordion.Header>\n                            <Accordion.Body>\n                                <Form>\n                                    <Row >\n                                        <Col md=\"4\">\n                                            <Form.Group >\n                                                <Form.Label>User Email</Form.Label>\n                                                <Form.Control type=\"email\" onChange={(event) => {\n                                                    setNewAdmin(event.target.value)\n\n                                                }} />\n\n                                                <Button className=\"border-0 bg-dark\" style={{ \"marginTop\": \"10px\" }}\n                                                    onClick={async () => {\n                                                        AddAdministrator({\n                                                            authToken: authToken,\n                                                            newAdmin: newAdmin\n                                                        })\n                                                    }}>Add User</Button>\n\n                                            </Form.Group>\n                                        </Col>\n                                    </Row>\n                                </Form>\n\n\n                            </Accordion.Body>\n                        </Accordion.Item>\n\n\n\n\n                    </Accordion>\n\n                </Card.Body>\n            </Card>\n        </div >\n    )\n}\n","// Copyright (C) 2022 Léo Gorman\n// \n// This file is part of rhomis-data-app.\n// \n// rhomis-data-app is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// rhomis-data-app is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with rhomis-data-app.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext, useEffect } from 'react'\n\nimport { Login, LoginComponent } from \"../login-component/login-component\"\nimport { DataQueryComponent } from \"../data-query-component/data-query-component\"\nimport { RegisterComponent } from '../register-component/register-component';\nimport PortalComponent from '../portal-component/portal-component';\nimport NotFoundComponent from '../not-found-component/not-found-component';\nimport ProjectManagementComponent from \"../project-management-component/project-management-component\"\nimport FormManagementComponent from '../form-management-component/form-management-component';\nimport FormAdminComponent from '../form-admin-component/form-admin-component';\n// import AccountManagementComponent from './components/account-management-component/account-management-component';\nimport MainNavbar from '../navigation-bar/navigation-bar-component'\nimport FormCreationComponent from '../form-creation-component/form-creation-component';\nimport AuthContext from '../authentication-component/AuthContext';\nimport UserContext from '../user-info-component/UserContext';\nimport {\n    HashRouter as Router,\n    RouteProps,\n    useHistory,\n    useLocation,\n    // BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\n\n\nimport { FetchUserInformation, CheckForLocalToken } from '../fetching-context-info/fetching-context-info';\n\n\nexport default function RoutingComponent() {\n\n    const [authToken, setAuthToken] = useContext(AuthContext)\n    const [userInfo, setUserInfo] = useContext(UserContext)\n    const history = useHistory()\n    // const location = useLocation()\n\n    useEffect(() => {\n        CheckForLocalToken({\n            setAuthToken: setAuthToken\n        })\n    }, [])\n\n    useEffect(() => {\n        FetchUserInformation({\n            authToken: authToken,\n            setUserInfo: setUserInfo\n        })\n    }, [authToken])\n\n    console.log(\"Auth token context\")\n    console.log(authToken)\n\n\n    if (authToken) {\n        return (\n            < Router >\n                <MainNavbar />\n                {/* <Fade> */}\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Redirect from=\"/\" to=\"/home\" />\n                    </Route>\n                    <Route path=\"/home\" component={PortalComponent} />\n\n                    <Route path=\"/projects/:projectName/forms/:formName\" component={FormAdminComponent} />\n                    <Route path=\"/projects/:projectName\" component={FormManagementComponent} />\n\n                    <Route path=\"/projects\" ><ProjectManagementComponent /></Route>\n\n\n                    {/* <Route path=\"/project/:projectName/form/:formName\"><FormManagementComponent /></Route> */}\n\n                    <Route path=\"/data-querying\" component={DataQueryComponent} />\n                    <Route path=\"/administration\" component={FormCreationComponent} />\n\n                    {/* <Route path=\"*\" component={NotFoundComponent} /> */}\n                    {/* <Redirect from=\"*\" to=\"/home\" /> */}\n\n                </Switch >\n                {/* </Fade> */}\n\n            </Router >\n        )\n    }\n\n    if (!authToken) {\n        return (\n            < Router >\n                {/* <Fade> */}\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Redirect from=\"/\" to=\"/login\" />\n                    </Route>\n                    <Route path=\"/register\"><RegisterComponent /></Route>\n                    <Route path=\"/login\"><LoginComponent /></Route>\n                    {/* <Redirect from=\"*\" to=\"/login\" /> */}\n                </Switch >\n                {/* </Fade> */}\n\n            </Router >\n        )\n    }\n}\n\n","// Copyright (C) 2022 Léo Gorman\n// \n// This file is part of rhomis-data-app.\n// \n// rhomis-data-app is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// rhomis-data-app is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with rhomis-data-app.  If not, see <http://www.gnu.org/licenses/>.\n\n/* See this tutorial for authentication state management\nhttps://stackoverflow.com/questions/41030361/how-to-update-react-context-from-inside-a-child-component\nhttps://reactrouter.com/web/example/auth-workflow \n*/\n\n// Import styling\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// Import router information\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\n// Import the various components\nimport RoutingComponent from './components/routing-component/routing-component';\n// Import the context which stores the authentication tokens\nimport AuthContext from './components/authentication-component/AuthContext';\nimport UserContext from './components/user-info-component/UserContext';\n\n\n\n\n\nfunction App() {\n  const [authToken, setAuthToken] = useState(null);\n  const [userInfo, setUserInfo] = useState(null)\n\n  return (\n    <AuthContext.Provider value={[authToken, setAuthToken]}>\n      <UserContext.Provider value={[userInfo, setUserInfo]}>\n        <div className=\"main-app-background\">\n          <div className=\"main-page\">\n            <RoutingComponent />\n          </div >\n        </div>\n      </UserContext.Provider>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}